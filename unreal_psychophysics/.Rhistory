#add block number to the block numbers in the repeat data
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]<-repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]
#add the number of times this condition has been run
repeat_data<- repeat_data %>% mutate(Attempt = as.numeric(attempt))
View(cleaned_previous_data)
#rbind repeat to cleaned attempt df
previous_attempt_plus_repeat<-rbind(cleaned_previous_data,repeat_data)
View(previous_attempt_plus_repeat)
previous_attempt_file<-stri_sub(previous_attempt_file,1,-5)
previous_attempt_file
#save the new data frame as an 'Answers' file
filename<-gsub(" ","",paste(previous_attempt_file,"_",as.character(attempt),"_.csv"))
filename
previous_attempt_file
previous_attempt_file[10]
previous_attempt_file[[10]]
previous_attempt_file
export(previous_attempt_plus_repeat,here("Studies",study,sub_folder_name,filename),col.names=TRUE)
list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Attempt*.csv"))[1];
filename<-gsub(" ","",paste(previous_attempt_file,"_",as.character(attempt),"_.csv"))
filename
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_file
stri_sub(previous_attempt_file,1,-5)
#save the new data frame as an 'Answers' file
filename<-gsub(" ","",paste(previous_attempt_file,"_",as.character(attempt),"_.csv"))
filename
export(previous_attempt_plus_repeat,here("Studies",study,sub_folder_name,filename),col.names=TRUE)
source(here("run_unreal_psy.R"))
repeat_data<-try(import(here("Studies",study,sub_folder_name,repeat_file)),warn_exists=FALSE,silent=TRUE)
repeat_data<-try(import(here("Studies",study,sub_folder_name,repeat_file)),silent=TRUE)
repeat_data
#load the previous attempt csv (there should be only one attempt file in the folder)
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_data<-try(import(here("Studies",study,sub_folder_name,previous_attempt_file)),silent=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
repeat_jnd()
sub_n = readline("Subject number:")
study=readline("Study folder name:")
attempt= readline(prompt = "Fitting attempt number:")
#{study_number,attempt}
#you need to run the function and it will prompt you with these questions
#attempt<-1;
#sub_n<-003;
cat("Make sure there is a repeat file and an answers file in the folder or repeat_jnd wont work")
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyr)
library(cowplot)
library(magicfor)
library(stringi)
library(rio)
library(here)
sub_folder_name<-paste0("sub_",sub_n)
#load the answers csv of the repeated staircases
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-try(import(here("Studies",study,sub_folder_name,repeat_file)),silent=TRUE)
View(repeat_data)
unlink(here("Studies",study,sub_folder_name,repeat_file))
#load the previous attempt csv (there should be only one attempt file in the folder)
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_data<-try(import(here("Studies",study,sub_folder_name,previous_attempt_file)),silent=TRUE)
unlink(here("Studies",study,sub_folder_name,previous_attempt_file))
#make a unique vector of the condition codes used in the repeat TrialNumber column
repeat_codes<-unique(repeat_data$TrialNumber)
#turn all codes into the 3 first digits
repeat_codes<-as.numeric(substr(repeat_codes,1,3))
#make a new column of codes with only 3 digits or less
previous_attempt_data<-previous_attempt_data %>% mutate(short_code = TrialNumber)
previous_attempt_data$short_code<-as.numeric(substr(previous_attempt_data$short_code,1,3))
#remove rows with these codes from previous attempt data
cleaned_previous_data<-previous_attempt_data  %>% filter(!short_code %in% repeat_codes)
#remove short_code column
cleaned_previous_data<-subset(cleaned_previous_data, select = -c(short_code))
#fix block number or step number for new conditions
last_block<-max(previous_attempt_data$BlockNumber)
#add block number to the block numbers in the repeat data
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]<-repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
#add the number of times this condition has been run
repeat_data<- repeat_data %>% mutate(Attempt = as.numeric(attempt))
#rbind repeat to cleaned attempt df
previous_attempt_plus_repeat<-rbind(cleaned_previous_data,repeat_data)
previous_attempt_file<-stri_sub(previous_attempt_file,1,-5)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
repeat_jnd()
repeat_jnd()
View(preprocessing)
View(threshold_fix)
View(repeat_list)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
run_unreal_psy()
repeat_jnd()
length(retake_list)>0
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
run_unreal_psy()
repeat_jnd()
run_unreal_psy()
run_unreal_psy()
run_unreal_psy()
rlang::last_trace()
run_unreal_psy()
study=readline("Study folder name:")
sub_n = readline("Subject number:")
attempt= readline(prompt = "Fitting attempt number:")
library(here)
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
source(here("post_fit_adjustments.R"))
source(here("threshold_fix.R"))
source(here("shift_conditions.R"))
source(here("plot_staircase.R"))
source(here("plot_staircase_unity.R"))
source(here("repeat_list.R"))
source(here("make_plots.R"))
source(here("load_thresholds.R"))
source(here("load_thresholds_fmri.R"))
source(here("repeat_jnd.R"))
sub_folder_name<-gsub(" ","",paste("sub_",sub_n))
subject_folder<-here("Studies",study,sub_folder_name)
results_folder_name<-gsub(" ","",paste("results_sub_",sub_n,'_attempt_',as.character(attempt)))
results_folder<-here("Studies",study,sub_folder_name,results_folder_name)
input_folder_name<- gsub(" ","",paste("unreal_input_sub_",sub_n,'_attempt_',as.character(attempt)))
unreal_input_folder<- gsub(" ","",paste(results_folder,"/",input_folder_name))
#list of folder names
folder_names<-list(sub_folder_name,results_folder_name,input_folder_name)
#create subject results folder
here(study,sub_folder_name,try(dir.create(results_folder,warn_exists=FALSE),silent=TRUE))
#create subject input folder for next experiment
here(study,sub_folder_name,results_folder,try(dir.create(unreal_input_folder,warn_exists=FALSE),silent=TRUE))
library(matlabr)
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyr)
library(cowplot)
library(magicfor)
library(stringi)
library(scales)
library(ggpubr)
library(formattable)
library(crayon)
library(rio)
library(here)
#set the filename, always take the file called Answers*
filename_ans<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1]
#read JND output csv filename
data<-import(here("Studies",study,sub_folder_name,filename_ans))
#check if this is the first attempt at fitting
if (attempt == 1){
data<- data %>% mutate(Attempt = attempt)
}
# save file
file_rename<-gsub(" ","",paste('Attempt_',as.character(attempt),'_',filename_ans))
export(data,here("Studies",study,sub_folder_name,results_folder_name,file_rename))#the file has column names no worries
#saving so we can attach to repeat files
export(data,here("Studies",study,sub_folder_name,filename_ans))
#remove throw away trials (Blocknumber==0)
data<-data[!(data$BlockNumber==0),]
#filter the df so that only staircase rows remain
filter_questions <-data$QuestionID==88
data<-data[filter_questions,]
#filter trials with no answer
data<-data[!(data$QuestionResult=="NoAnswerInTime"),]
#remove columns we don't need
data_c<-subset(data, select=-c(ProbabilityComment,TimesatmpInitialDirection,InitialDirection,SessionID,Phase,QuestionID,TimeOfHit,NegativeAnswersCount,PositiveAnswersCount,ConvertedValue))
#rename some columns
colnames(data_c)[1]<-"Block"
colnames(data_c)[2]<-"ConditionCode"
colnames(data_c)[6]<-"TrialNumber"
#adding within-staircase trial index column called 'StepNumber'
data_c<-data_c %>% dplyr::group_by(BlockNumber) %>% dplyr::mutate(StepNumber = dplyr::row_number())
#creating a condition_name column
data_c<-data_c %>% mutate(ConditionName = ConditionCode)
#creating a domain column
data_c <- data_c %>% mutate(Domain = ConditionName)
#start making a reversals column
data_c<-data_c%>%mutate(ReversalPoints=QuestionResult)
#adding condition & domain names
data_c<-name_conditions_and_domains(data_c)
#reorder columns
col_order <- c("TrialNumber", "BlockNumber","StepNumber","ConditionCode","ConditionName","Domain",
"QuestionResult","ReversalPoints","StairCaseValue","TimeStampStartQuestion","TimestampEndQuestion","ResponseTime","Attempt")
data_c <- data_c[, col_order]
#save a data frame of the data so far (data_c)
data_cs<-data_c
#change columns to factors and 0/1 for rev points calculation
data_cs$ReversalPoints<-as.factor(data_cs$ReversalPoints)
data_cs$QuestionResult<-as.factor(data_cs$QuestionResult)
data_cs$ReversalPoints<-droplevels(data_cs$ReversalPoints)
data_cs$QuestionResult<-droplevels(data_cs$QuestionResult)
index<-unique(data_cs$BlockNumber)
View(data_cs)
for (x in index){
diffs<-diff(data_cs[data_cs$BlockNumber==x,]$ReversalPoints)
diffs<- c(0,diffs)
diffs<-(abs(diffs))
data_cs[data_cs$BlockNumber==x,]$ReversalPoints<-as.factor(diffs)
}
index
x
diffs<-diff(data_cs[data_cs$BlockNumber==x,]$ReversalPoints)
diffs
library(matlabr)
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyr)
library(cowplot)
library(magicfor)
library(stringi)
library(scales)
library(ggpubr)
library(formattable)
library(crayon)
library(rio)
library(here)
#set the filename, always take the file called Answers*
filename_ans<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1]
#read JND output csv filename
data<-import(here("Studies",study,sub_folder_name,filename_ans))
#check if this is the first attempt at fitting
if (attempt == 1){
data<- data %>% mutate(Attempt = attempt)
}
# save file
file_rename<-gsub(" ","",paste('Attempt_',as.character(attempt),'_',filename_ans))
export(data,here("Studies",study,sub_folder_name,results_folder_name,file_rename))#the file has column names no worries
#saving so we can attach to repeat files
export(data,here("Studies",study,sub_folder_name,filename_ans))
######################################## Editing the data frame #########################
#remove throw away trials (Blocknumber==0)
data<-data[!(data$BlockNumber==0),]
#filter the df so that only staircase rows remain
filter_questions <-data$QuestionID==88
data<-data[filter_questions,]
#filter trials with no answer
data<-data[!(data$QuestionResult=="NoAnswerInTime"),]
#remove columns we don't need
data_c<-subset(data, select=-c(ProbabilityComment,TimesatmpInitialDirection,InitialDirection,SessionID,Phase,QuestionID,TimeOfHit,NegativeAnswersCount,PositiveAnswersCount,ConvertedValue))
#rename some columns
colnames(data_c)[1]<-"Block"
colnames(data_c)[2]<-"ConditionCode"
colnames(data_c)[6]<-"TrialNumber"
#adding within-staircase trial index column called 'StepNumber'
data_c<-data_c %>% dplyr::group_by(BlockNumber) %>% dplyr::mutate(StepNumber = dplyr::row_number())
#creating a condition_name column
data_c<-data_c %>% mutate(ConditionName = ConditionCode)
#creating a domain column
data_c <- data_c %>% mutate(Domain = ConditionName)
#start making a reversals column
data_c<-data_c%>%mutate(ReversalPoints=QuestionResult)
#adding condition & domain names
data_c<-name_conditions_and_domains(data_c)
#reorder columns
col_order <- c("TrialNumber", "BlockNumber","StepNumber","ConditionCode","ConditionName","Domain",
"QuestionResult","ReversalPoints","StairCaseValue","TimeStampStartQuestion","TimestampEndQuestion","ResponseTime","Attempt")
data_c <- data_c[, col_order]
#save a data frame of the data so far (data_c)
data_cs<-data_c
#change columns to factors and 0/1 for rev points calculation
data_cs$ReversalPoints<-as.factor(data_cs$ReversalPoints)
data_cs$QuestionResult<-as.factor(data_cs$QuestionResult)
data_cs$ReversalPoints<-droplevels(data_cs$ReversalPoints)
data_cs$QuestionResult<-droplevels(data_cs$QuestionResult)
index<-unique(data_cs$BlockNumber)
for (x in index){
diffs<-diff(data_cs[data_cs$BlockNumber==x,]$ReversalPoints)
diffs<- c(0,diffs)
diffs<-(abs(diffs))
data_cs[data_cs$BlockNumber==x,]$ReversalPoints<-as.factor(diffs)
}
View(data_cs)
library(matlabr)
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyr)
library(cowplot)
library(magicfor)
library(stringi)
library(scales)
library(ggpubr)
library(formattable)
library(crayon)
library(rio)
library(here)
#set the filename, always take the file called Answers*
filename_ans<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1]
#read JND output csv filename
data<-import(here("Studies",study,sub_folder_name,filename_ans))
#check if this is the first attempt at fitting
if (attempt == 1){
data<- data %>% mutate(Attempt = attempt)
}
# save file
file_rename<-gsub(" ","",paste('Attempt_',as.character(attempt),'_',filename_ans))
export(data,here("Studies",study,sub_folder_name,results_folder_name,file_rename))#the file has column names no worries
#saving so we can attach to repeat files
export(data,here("Studies",study,sub_folder_name,filename_ans))
######################################## Editing the data frame #########################
#remove throw away trials (Blocknumber==0)
data<-data[!(data$BlockNumber==0),]
#filter the df so that only staircase rows remain
filter_questions <-data$QuestionID==88
data<-data[filter_questions,]
#filter trials with no answer
data<-data[!(data$QuestionResult=="NoAnswerInTime"),]
#remove columns we don't need
data_c<-subset(data, select=-c(ProbabilityComment,TimesatmpInitialDirection,InitialDirection,SessionID,Phase,QuestionID,TimeOfHit,NegativeAnswersCount,PositiveAnswersCount,ConvertedValue))
#rename some columns
colnames(data_c)[1]<-"Block"
colnames(data_c)[2]<-"ConditionCode"
colnames(data_c)[6]<-"TrialNumber"
#adding within-staircase trial index column called 'StepNumber'
data_c<-data_c %>% dplyr::group_by(BlockNumber) %>% dplyr::mutate(StepNumber = dplyr::row_number())
#creating a condition_name column
data_c<-data_c %>% mutate(ConditionName = ConditionCode)
#creating a domain column
data_c <- data_c %>% mutate(Domain = ConditionName)
#start making a reversals column
data_c<-data_c%>%mutate(ReversalPoints=QuestionResult)
#adding condition & domain names
data_c<-name_conditions_and_domains(data_c)
#reorder columns
col_order <- c("TrialNumber", "BlockNumber","StepNumber","ConditionCode","ConditionName","Domain",
"QuestionResult","ReversalPoints","StairCaseValue","TimeStampStartQuestion","TimestampEndQuestion","ResponseTime","Attempt")
data_c <- data_c[, col_order]
#save a data frame of the data so far (data_c)
data_cs<-data_c
levels(data_cs$ReversalPoints)
data_cs$ReversalPoints<-as.factor(data_cs$ReversalPoints)
data_cs$QuestionResult<-as.factor(data_cs$QuestionResult)
levels(data_cs$ReversalPoints)
data_cs$ReversalPoints
data_cs$ReversalPoints<-droplevels(data_cs$ReversalPoints)
levels(data_cs$ReversalPoints)
data_cs$ReversalPoints
data_cs$QuestionResult<-droplevels(data_cs$QuestionResult)
data_cs$QuestionResult
index<-unique(data_cs$BlockNumber)
index
for (x in index){
diffs<-diff(data_cs[data_cs$BlockNumber==x,]$ReversalPoints)
diffs<- c(0,diffs)
diffs<-(abs(diffs))
data_cs[data_cs$BlockNumber==x,]$ReversalPoints<-as.factor(diffs)
}
data_cs[data_cs$BlockNumber==x,]$ReversalPoints
x
diffs<-diff(data_cs[data_cs$BlockNumber==x,]$ReversalPoints)
diffs
diff(data_cs[data_cs$BlockNumber==x,]$ReversalPoints)
class(x)
diff(data_cs[data_cs$BlockNumber==6,]$ReversalPoints)
diff(as.numeric(as.character(data_cs[data_cs$BlockNumber==6,]$ReversalPoints)))
library(matlabr)
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyr)
library(cowplot)
library(magicfor)
library(stringi)
library(scales)
library(ggpubr)
library(formattable)
library(crayon)
library(rio)
library(here)
#set the filename, always take the file called Answers*
filename_ans<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1]
#read JND output csv filename
data<-import(here("Studies",study,sub_folder_name,filename_ans))
#check if this is the first attempt at fitting
if (attempt == 1){
data<- data %>% mutate(Attempt = attempt)
}
# save file
file_rename<-gsub(" ","",paste('Attempt_',as.character(attempt),'_',filename_ans))
export(data,here("Studies",study,sub_folder_name,results_folder_name,file_rename))#the file has column names no worries
#saving so we can attach to repeat files
export(data,here("Studies",study,sub_folder_name,filename_ans))
######################################## Editing the data frame #########################
#remove throw away trials (Blocknumber==0)
data<-data[!(data$BlockNumber==0),]
#filter the df so that only staircase rows remain
filter_questions <-data$QuestionID==88
data<-data[filter_questions,]
#filter trials with no answer
data<-data[!(data$QuestionResult=="NoAnswerInTime"),]
#remove columns we don't need
data_c<-subset(data, select=-c(ProbabilityComment,TimesatmpInitialDirection,InitialDirection,SessionID,Phase,QuestionID,TimeOfHit,NegativeAnswersCount,PositiveAnswersCount,ConvertedValue))
#rename some columns
colnames(data_c)[1]<-"Block"
colnames(data_c)[2]<-"ConditionCode"
colnames(data_c)[6]<-"TrialNumber"
#adding within-staircase trial index column called 'StepNumber'
data_c<-data_c %>% dplyr::group_by(BlockNumber) %>% dplyr::mutate(StepNumber = dplyr::row_number())
#creating a condition_name column
data_c<-data_c %>% mutate(ConditionName = ConditionCode)
#creating a domain column
data_c <- data_c %>% mutate(Domain = ConditionName)
#start making a reversals column
data_c<-data_c%>%mutate(ReversalPoints=QuestionResult)
#adding condition & domain names
data_c<-name_conditions_and_domains(data_c)
#reorder columns
col_order <- c("TrialNumber", "BlockNumber","StepNumber","ConditionCode","ConditionName","Domain",
"QuestionResult","ReversalPoints","StairCaseValue","TimeStampStartQuestion","TimestampEndQuestion","ResponseTime","Attempt")
data_c <- data_c[, col_order]
#save a data frame of the data so far (data_c)
data_cs<-data_c
index<-unique(data_cs$BlockNumber)
for (x in index){
diffs<-diff(data_cs[data_cs$BlockNumber==x,]$ReversalPoints)
diffs<- c(0,diffs)
diffs<-(abs(diffs))
data_cs[data_cs$BlockNumber==x,]$ReversalPoints<-as.factor(diffs)
}
data_cs$BlockNumber
class(data_cs$BlockNumber)
class(data_cs$ReversalPoints)
sub_n = readline("Subject number:")
attempt<-2
sub_folder_name<-gsub(" ","",paste("sub_",sub_n))
subject_folder<-here("Studies",study,sub_folder_name)
results_folder_name<-gsub(" ","",paste("results_sub_",sub_n,'_attempt_',as.character(attempt)))
results_folder<-here("Studies",study,sub_folder_name,results_folder_name)
input_folder_name<- gsub(" ","",paste("unreal_input_sub_",sub_n,'_attempt_',as.character(attempt)))
unreal_input_folder<- gsub(" ","",paste(results_folder,"/",input_folder_name))
#list of folder names
folder_names<-list(sub_folder_name,results_folder_name,input_folder_name)
#create subject results folder
here(study,sub_folder_name,try(dir.create(results_folder,warn_exists=FALSE),silent=TRUE))
#create subject input folder for next experiment
here(study,sub_folder_name,results_folder,try(dir.create(unreal_input_folder,warn_exists=FALSE),silent=TRUE))
library(matlabr)
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyr)
library(cowplot)
library(magicfor)
library(stringi)
library(scales)
library(ggpubr)
library(formattable)
library(crayon)
library(rio)
library(here)
#set the filename, always take the file called Answers*
filename_ans<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1]
#read JND output csv filename
data<-import(here("Studies",study,sub_folder_name,filename_ans))
#check if this is the first attempt at fitting
if (attempt == 1){
data<- data %>% mutate(Attempt = attempt)
}
# save file
file_rename<-gsub(" ","",paste('Attempt_',as.character(attempt),'_',filename_ans))
export(data,here("Studies",study,sub_folder_name,results_folder_name,file_rename))#the file has column names no worries
#saving so we can attach to repeat files
export(data,here("Studies",study,sub_folder_name,filename_ans))
######################################## Editing the data frame #########################
#remove throw away trials (Blocknumber==0)
data<-data[!(data$BlockNumber==0),]
#filter the df so that only staircase rows remain
filter_questions <-data$QuestionID==88
data<-data[filter_questions,]
#filter trials with no answer
data<-data[!(data$QuestionResult=="NoAnswerInTime"),]
#remove columns we don't need
data_c<-subset(data, select=-c(ProbabilityComment,TimesatmpInitialDirection,InitialDirection,SessionID,Phase,QuestionID,TimeOfHit,NegativeAnswersCount,PositiveAnswersCount,ConvertedValue))
#rename some columns
colnames(data_c)[1]<-"Block"
colnames(data_c)[2]<-"ConditionCode"
colnames(data_c)[6]<-"TrialNumber"
#adding within-staircase trial index column called 'StepNumber'
data_c<-data_c %>% dplyr::group_by(BlockNumber) %>% dplyr::mutate(StepNumber = dplyr::row_number())
#creating a condition_name column
data_c<-data_c %>% mutate(ConditionName = ConditionCode)
#creating a domain column
data_c <- data_c %>% mutate(Domain = ConditionName)
#start making a reversals column
data_c<-data_c%>%mutate(ReversalPoints=QuestionResult)
#adding condition & domain names
data_c<-name_conditions_and_domains(data_c)
#reorder columns
col_order <- c("TrialNumber", "BlockNumber","StepNumber","ConditionCode","ConditionName","Domain",
"QuestionResult","ReversalPoints","StairCaseValue","TimeStampStartQuestion","TimestampEndQuestion","ResponseTime","Attempt")
data_c <- data_c[, col_order]
#save a data frame of the data so far (data_c)
data_cs<-data_c
#change columns to factors and 0/1 for rev points calculation
data_cs$ReversalPoints<-as.factor(data_cs$ReversalPoints)
data_cs$QuestionResult<-as.factor(data_cs$QuestionResult)
data_cs$ReversalPoints<-droplevels(data_cs$ReversalPoints)
data_cs$QuestionResult<-droplevels(data_cs$QuestionResult)
index<-unique(data_cs$BlockNumber)
for (x in index){
diffs<-diff(data_cs[data_cs$BlockNumber==x,]$ReversalPoints)
diffs<- c(0,diffs)
diffs<-(abs(diffs))
data_cs[data_cs$BlockNumber==x,]$ReversalPoints<-as.factor(diffs)
}
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
run_unreal_psy()
