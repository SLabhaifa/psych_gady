table_summary[,"Avg_D.rev"]<-rev_sum[rev_sum$Run == 1,"rev_vals"]
table_summary[,"Avg_A.rev"]<-rev_sum[rev_sum$Run == 2,"rev_vals"]
#average converged value for each condition
table_summary<-table_summary %>% mutate( Avg_reversal = apply(table_summary,1,mean,na.rm=TRUE))
#table_summary<-round(table_summary,digits=3)
####################################################
#how many rev points in each run/condition?
data_cs$ReversalPoints<-as.numeric(as.character(data_cs$ReversalPoints))
rev_count<-summaryBy(ReversalPoints ~ Run+ConditionName, data=data_cs, FUN=function(x) {c (c=sum(x))},keep.names=TRUE)
rev_count1<-rev_count %>% pull(ReversalPoints)
rev_length<-length(rev_count1)
table_summary<-table_summary %>% mutate(D = rev_count1[1:(rev_length/2)])
table_summary<-table_summary %>% mutate(A = rev_count1[((rev_length/2)+1):rev_length])
####################################################
#how many steps in each staircase?
#step_count<-summaryBy(Steps ~ Run+ConditionName, data=data_cs, FUN=function(x) {c (sn=max(x))},keep.names=TRUE)
step_count<-summaryBy(Steps ~ Run+ConditionName, data=data_cs, FUN=function(x) {c (sn=max(x))},keep.names=TRUE)
Steps<-step_count %>% pull(Steps)
steps_length<-length(step_count$Steps)
table_summary<-table_summary %>% mutate(steps1 = Steps[1:(steps_length/2)])
table_summary<-table_summary %>% mutate(steps2 =  Steps[((steps_length/2)+1):steps_length])
table_summary$avg_step_count<-rowMeans(table_summary[,c("steps1","steps2")],na.rm=TRUE)
#name rows by condition
rownames(table_summary)<-ConditionName_vec
####################################################
#table_summary<-round(as.numeric(table_summary),digits=3)
#looking at within trial data
#how many vases did the subject hit in each run and each condition?
vase_data<-data
#name columns
colnames(vase_data)[1]<-"dont use"
colnames(vase_data)[2]<-"ConditionCode"
#filter-out trials with codes 1 or 99 from the df
target_a<-c("1","99")
target_b<-c("1","0")
target_c<-c("Throw away")
vase_data_b<-filter(vase_data,!ConditionCode %in% target_a,)
vase_data_b<-filter(vase_data_b,!QuestionResult %in% target_b)
vase_data_b<-filter(vase_data_b, !ConditionName %in% target_c)
#looking at within trial data
#how many vases did the subject hit in each run and each condition?
vase_data<-data
#name columns
colnames(vase_data)[1]<-"dont use"
colnames(vase_data)[2]<-"ConditionCode"
#filter-out trials with codes 1 or 99 from the df
target_a<-c("1","99")
target_b<-c("1","0")
target_c<-c("Throw away")
vase_data_b<-filter(vase_data,!ConditionCode %in% target_a,)
vase_data_b<-filter(vase_data_b,!QuestionResult %in% target_b)
vase_data_b<-vase_data_b %>% mutate(ConditionName = ConditionCode)
#adding effect names column to data
vase_data_b<-name_conditions(vase_data_b)
vase_data_b<-filter(vase_data_b, !ConditionName %in% target_c)
#create a column of run numbers
vase_data_b<-vase_data_b %>% group_by(ConditionName) %>% mutate(Run = dense_rank(BlockNumber))
qagg<-vase_data_b %>% group_by(Run,ConditionName,QuestionResult) %>% tally()
filter_hits <-qagg$QuestionResult=="MarkedTargetHit"
qagg_b<-qagg[filter_hits,]
qagg_c<-subset(qagg_b,select=-c(QuestionResult))
qagg_c<-qagg_c[order(qagg_c$ConditionName),]
names(qagg_c)<-c("Run","ConditionName","Count")
#divide number of hits with max number of steps*2 in each run
num_of_vases<-step_count[order(step_count$ConditionName),]$Steps*2
target_hits<-qagg_c$Count/num_of_vases
qagg_c$Count<-target_hits
names(qagg_c)<-c("Run","ConditionName","%_Hits")
vase_hits<-qagg_c %>% pull("%_Hits")
#vase_hit_length<-length(vase_hits)
#place them in table by block or run
dhits<-qagg_c$`%_Hits`[seq(1,length(qagg_c),2)]
ahits<-qagg_c$`%_Hits`[seq(2,length(qagg_c)+1,2)]
table_summary<-table_summary %>% mutate(hits1 = dhits)
table_summary<-table_summary %>% mutate(hits2 = ahits)
#name rows by condition
#rownames(table_summary)<-ConditionName_vec
#what was the response time for answering the question?
#filtering
filter_qrt <-vase_data$ResponseTime>0
qrt<-vase_data[filter_qrt,]
filter_qid <-qrt$QuestionID==88
qrt<-qrt[filter_qid,]
qrt<-filter(qrt, !ConditionName %in% target_c)
#what was the response time for answering the question?
#filtering
filter_qrt <-vase_data$ResponseTime>0
qrt<-vase_data[filter_qrt,]
filter_qid <-qrt$QuestionID==88
qrt<-qrt[filter_qid,]
#naming
qrt<-qrt %>% mutate(ConditionName = ConditionCode)
#adding effect names column
qrt<-name_conditions(qrt)
qrt<-filter(qrt, !ConditionName %in% target_c)
#create a column of run numbers
qrt<-qrt %>% group_by(ConditionName) %>% mutate(Run = dense_rank(BlockNumber))
#summarize question reaction times
Q_rt<-summaryBy(ResponseTime ~ ConditionName+Run, data=qrt, FUN=function(x) {m=mean(x)},keep.names=TRUE)
Q_RT <- Q_rt %>% pull("ResponseTime")
#Q_RT_length<-length(Q_RT)
#place them in sequences
d_rt<-Q_rt$ResponseTime[seq(1,length(Q_RT),2)]
a_rt<-Q_rt$ResponseTime[seq(2,length(Q_RT)+1,2)]
table_summary<-table_summary %>% mutate(rt1 = d_rt)
table_summary<-table_summary %>% mutate(rt2 = a_rt)
#how many neg pos answers??
positive_ans<-summaryBy(PositiveAnswersCount ~ Run+ConditionName, data=data_cs, FUN=function(x) {max=max(x,na.rm = TRUE)},keep.names=TRUE)
negative_ans<-summaryBy(NegativeAnswersCount ~ Run+ConditionName, data=data_cs, FUN=function(x) {max=max(x,na.rm = TRUE)},keep.names=TRUE)
pos_a<-positive_ans %>% pull("PositiveAnswersCount")
neg_a<-negative_ans %>% pull("NegativeAnswersCount")
pos_a_length<-length(pos_a)
neg_a_length<-length(neg_a)
table_summary<-table_summary %>% mutate(pos1 = pos_a[1:(pos_a_length/2)])
table_summary<-table_summary %>% mutate(pos2 = pos_a[((pos_a_length/2)+1):(pos_a_length)])
table_summary<-table_summary %>% mutate(neg1 = neg_a[1:(neg_a_length/2)])
table_summary<-table_summary %>% mutate(neg2 = neg_a[((neg_a_length/2)+1):(neg_a_length)])
rownames(table_summary)<-ConditionName_vec
table_summary<-table_summary %>% mutate(ConditionName = ConditionName_vec)
#what was the range of practical values (i.e. where did they start and stop seeing the condition, and within this range where does the variability reside?)
data_cs<-data_cs %>% mutate(Detect = abs(StairCaseValue*as.numeric(as.character(QuestionResult))))
data_cs$Detect[data_cs$Detect==0]<-NA
#here is a problem, we are not treating the blocks seperately
value_range<-summaryBy(Detect ~ BlockNumber+ConditionName, data=data_cs, FUN=function(x) {c (max=max(x,na.rm=TRUE),min=min(x,na.rm=TRUE))},keep.names=TRUE)
#we have to order the rows alphabetically so they fit in the right place in table_summary
value_range<-value_range[order(value_range$ConditionName),]
val_rang1<- value_range %>% pull(Detect.max)
val_rang2<- value_range %>% pull(Detect.min)
#pick first run and then 2nd run
dtop<-val_rang1[seq(1,length(val_rang1),2)]
atop<-val_rang1[seq(2,length(val_rang1),2)]
dlow<-val_rang2[seq(1,length(val_rang2),2)]
alow<-val_rang2[seq(2,length(val_rang2),2)]
table_summary<-table_summary %>% mutate(Dtop_range = dtop)
table_summary<-table_summary %>% mutate(Atop_range = atop)
table_summary<-table_summary %>% mutate(Dlow_range = dlow)
table_summary<-table_summary %>% mutate(Alow_range = alow)
data_cs<-data_cs %>% mutate(unDetect = as.numeric(as.character(QuestionResult)))
data_cs$unDetect[data_cs$unDetect==1]<-NA
data_cs$unDetect[data_cs$unDetect==0]<-1
data_cs$unDetect<-data_cs$unDetect*data_cs$StairCaseValue
undetected_range<-summaryBy(unDetect ~ BlockNumber+ConditionName, data=data_cs, FUN=function(x) {c(max=max(x,na.rm=TRUE),min=min(x,na.rm=TRUE))},keep.names=TRUE)
un_rang1<- undetected_range %>% pull(unDetect.max)
un_rang2<- undetected_range %>% pull(unDetect.min)
#pick first run then 2nd run
dtop_un<-un_rang1[seq(1,length(un_rang1),2)]
atop_un<-un_rang1[seq(2,length(un_rang1),2)]
dlow_un<-un_rang2[seq(1,length(un_rang2),2)]
alow_un<-un_rang2[seq(2,length(un_rang2),2)]
table_summary<-table_summary %>% mutate(Dt_und = dtop_un)
table_summary<-table_summary %>% mutate(At_und = atop_un)
table_summary<-table_summary %>% mutate(Dl_und = dlow_un)
table_summary<-table_summary %>% mutate(Al_und = alow_un)
#general stuff:
no_ans_in_time<-summary(data$QuestionResult)[4]#getting the 4th column of this summary
blocks<-length(unique(data_cs$BlockNumber))#getting number of blocks we ran
vase_score<-summary(data$QuestionResult)[3]/sum(num_of_vases)#getting the percent of correct target hits
names(vase_score)<-c("Vase Score")
vase_score<-round(vase_score,2)
#wrong answers
#make sure all are numeric values
#table_summary<-as.numeric(as.character(table_summary))
#round numbers - Idk why but I had to round these columns one at a time, stupid R/stupid Gadi
table_summary$hits1<-round(table_summary$hits1,digits=3)
table_summary$hits2<-round(table_summary$hits2,digits=3)
table_summary$rt1<-round(table_summary$rt1,digits=3)
table_summary$rt2<-round(table_summary$rt2,digits=3)
#adding fitted threshold values and R^2
#table_summary<-table_summary %>% mutate(ConditionName = ConditionName_vec)
#ask for JND thresholds csv
print("Choose the subjects' JND thresholds.csv file")
filename2<-file.choose(new=FALSE);
#read JND output csv filename
th_csv<-read.csv(filename2);
#create level columns before looping
table_summary<-table_summary %>% mutate(L1 = ConditionName)
table_summary<-table_summary %>% mutate(L2 = ConditionName)
table_summary<-table_summary %>% mutate(L3 = ConditionName)
table_summary<-table_summary %>% mutate(L4 = ConditionName)
table_summary<-table_summary %>% mutate(pseudo_R_sqr = ConditionName)
for (i in 1:length(ConditionName_vec)){
x<-ConditionName_vec[i]
levels<-th_csv$stim_val[th_csv$Condition==x]
t_levels<-transpose(as.list(levels))
table_summary[table_summary$ConditionName==x,c("L1","L2","L3","L4")]<-round(unlist(t_levels),4)
table_summary[table_summary$ConditionName==x,"pseudo_R_sqr"]<-round(max(th_csv$pr2[th_csv$Condition==x]),2)
}
#name rows by condition
rownames(table_summary)<-ConditionName_vec
#name columns
#colnames(table_summary)
column_names<-c("Average Reversal Value 1","Average Reversal Value  2","Average Reversal","Number of Reversals 1","Number of Reversals 2","Number of Steps 1","Number of Steps 2","Average Number of Steps","% Vase Hits 1","% Vase Hits 2","Question RT 1","Question RT 2","Positive Ans 1","Positive Ans 2","Negative Ans 1","Negative Ans 2","High Range 1","High Range 2","Low Range 1","Low Range 2","High Miss 1","High Miss 2","Low Miss 1","Low Miss 2","ConditionName","%20 Detection","%50 Detection","%75 Detection","%95 Detection","Pseudo R Squared")
colnames(table_summary)<-column_names
col_order <- c("ConditionName","Average Reversal Value 1","Average Reversal Value  2","Average Reversal","Number of Reversals 1","Number of Reversals 2","Number of Steps 1","Number of Steps 2","Average Number of Steps","% Vase Hits 1","% Vase Hits 2","Question RT 1","Question RT 2","Positive Ans 1","Negative Ans 1","Positive Ans 2","Negative Ans 2","High Range 1","High Range 2","Low Range 1","Low Range 2","High Miss 1","High Miss 2","Low Miss 1","Low Miss 2","%20 Detection","%50 Detection","%75 Detection","%95 Detection","Pseudo R Squared")
table_summary <- table_summary[, col_order]
#create input in template form
setwd("C:\\Users\\User\\Desktop\\Unreal_Scripts")
#sub<-readr::parse_number(basename(unreal_rand_temp))
filename<-gsub(" ","",paste("jnd_summary",as.character(sub_n),".csv"))
fwrite(table_summary,filename,col.names=TRUE,row.names = TRUE)
#fwrite(data_cs,'pGD_2sc.csv',col.names=TRUE)
print("I am complete")
library(data.table)
library(ggplot2) #ploting tool
library(dplyr) #data wrangling tool
library(tidyr) #data wrangling tool
library(cowplot) #for arranging plots together
library(magicfor)#magical for loops that can output all kinds of stuff
library(stringi)#for manipulating strings
library(ggpubr)
library(ggsci)
library(RColorBrewer)
library(scales)
library(ggthemes)
library(extrafont)
library(gridExtra)
library(itertools)
library(validate)
load("name_conditions.rda")
#ask for subject number
sub_n <- readline(prompt="Enter Subject Number: ")
#ask for JND answers csv
print("Choose the subjects' JND Answers.csv file")
filename<-file.choose(new=FALSE);
#read JND output csv filename
data<-read.csv(filename);
print("Validating results...")
#df cleaning befor validating the data
#filter the df so that only staicase rows remain
filter_questions <-data$QuestionID==88
data_b<-data[filter_questions,]
#filter trials with no answer from the subject
data_c<-data_b[!(data_b$QuestionResult=="NoAnswerInTime"),]
#remove the columns we aren't using
data_c<-subset(data_c, select=-c(SessionID,Phase,QuestionID,TimeStampStartQuestion,TimestampEndQuestion,ResponseTime, TimeOfVaseHit,ConvertedValue,ProbabilityComment))
#rename some df columns
colnames(data_c)[1]<-"Block"
colnames(data_c)[2]<-"ConditionCode"
colnames(data_c)[8]<-"TrialNumber"
#adding within-staircase trial index column called 'Steps'
data_c<-data_c %>% group_by(BlockNumber) %>% mutate(Steps = row_number())
#creating a condition name column
data_c<-data_c %>% mutate(ConditionName = ConditionCode)
#start making a reversals column
data_c<-data_c%>%mutate(ReversalPoints=QuestionResult)
#rounding staircase values for beauty
data_c$StairCaseValue<-round(data_c$StairCaseValue,3)
#adding effect names column to data
data_c<-name_conditions(data_c)
#filter trials with no answer from the subject
data_c<-data_c[!(data_c$ConditionName=="Throw away"),]
ConditionName_vec<-unique(as.vector(data_c$ConditionName))#MAKE SURE THE ORDER OF CONDITION NAMES IS ALPHABETICAL
ConditionName_vec<-ConditionName_vec[order(ConditionName_vec)]
#create a column of run numbers
data_c<-data_c %>% group_by(ConditionName) %>% mutate(Run = dense_rank(BlockNumber))
#reorder the columns so they make sense
col_order <- c("TrialNumber", "BlockNumber","Run","Steps","PositiveAnswersCount","NegativeAnswersCount","ConditionCode","ConditionName",
"QuestionResult","ReversalPoints","StairCaseValue")
data_c <- data_c[, col_order]
data_cs<-data_c
#change answers so we can treat detection as 1 and undetection as 0.
data_cs$QuestionResult<-as.numeric(as.character(data_cs$QuestionResult));
#
data_cs$QuestionResult<-(data_cs$QuestionResult-1)*(-1)
#finish calculating the reversal points column
data_cs$ReversalPoints<-as.factor(data_cs$ReversalPoints)
data_cs$QuestionResult<-as.factor(data_cs$QuestionResult)
data_cs$ReversalPoints<-droplevels(data_cs$ReversalPoints)
data_cs$QuestionResult<-droplevels(data_cs$QuestionResult)
index<-c(1:(length(unique(data_cs$BlockNumber))))
for (x in index){
diffs<-diff(data_cs[data_cs$BlockNumber==x,]$ReversalPoints)#calculate the diff between question results for each staircase
diffs<- c(0,diffs)
diffs<-(abs(diffs))
data_cs[data_cs$BlockNumber==x,]$ReversalPoints<-as.factor(diffs)
}
#Define the max number of runs for each condition (2 runs since 11.2021)
max_Runs=2;
#calc of rev.point values and avgs
data_cs<-data_cs %>% mutate(rev_vals = as.numeric(as.character(ReversalPoints))*StairCaseValue)
data_cs$rev_vals[data_cs$rev_vals == 0] <- NA
#creating summary table
table_summary=matrix(NA, length(ConditionName_vec),max_Runs);
table_summary<-data.frame(table_summary)
names(table_summary)<-c("Avg_D.rev", "Avg_A.rev")
############################################### CHECK THIS
#row_order<-ConditionName_vec
#table_summary <- table_summary[row_order,]
################################################# CHECK THIS
############################### testing doBY package for summarizing data
library(doBy)
rev_sum<-summaryBy(rev_vals ~ Run+ConditionName, data=data_cs, FUN=function(x) {c (m=mean(x,na.rm=TRUE))},keep.names=TRUE)
table_summary[,"Avg_D.rev"]<-rev_sum[rev_sum$Run == 1,"rev_vals"]
table_summary[,"Avg_A.rev"]<-rev_sum[rev_sum$Run == 2,"rev_vals"]
#average converged value for each condition
table_summary<-table_summary %>% mutate( Avg_reversal = apply(table_summary,1,mean,na.rm=TRUE))
#table_summary<-round(table_summary,digits=3)
####################################################
#how many rev points in each run/condition?
data_cs$ReversalPoints<-as.numeric(as.character(data_cs$ReversalPoints))
rev_count<-summaryBy(ReversalPoints ~ Run+ConditionName, data=data_cs, FUN=function(x) {c (c=sum(x))},keep.names=TRUE)
rev_count1<-rev_count %>% pull(ReversalPoints)
rev_length<-length(rev_count1)
table_summary<-table_summary %>% mutate(D = rev_count1[1:(rev_length/2)])
table_summary<-table_summary %>% mutate(A = rev_count1[((rev_length/2)+1):rev_length])
####################################################
#how many steps in each staircase?
#step_count<-summaryBy(Steps ~ Run+ConditionName, data=data_cs, FUN=function(x) {c (sn=max(x))},keep.names=TRUE)
step_count<-summaryBy(Steps ~ Run+ConditionName, data=data_cs, FUN=function(x) {c (sn=max(x))},keep.names=TRUE)
Steps<-step_count %>% pull(Steps)
steps_length<-length(step_count$Steps)
table_summary<-table_summary %>% mutate(steps1 = Steps[1:(steps_length/2)])
table_summary<-table_summary %>% mutate(steps2 =  Steps[((steps_length/2)+1):steps_length])
table_summary$avg_step_count<-rowMeans(table_summary[,c("steps1","steps2")],na.rm=TRUE)
#name rows by condition
rownames(table_summary)<-ConditionName_vec
####################################################
#table_summary<-round(as.numeric(table_summary),digits=3)
#looking at within trial data
#how many vases did the subject hit in each run and each condition?
vase_data<-data
#name columns
colnames(vase_data)[1]<-"dont use"
colnames(vase_data)[2]<-"ConditionCode"
#filter-out trials with codes 1 or 99 from the df
target_a<-c("1","99")
target_b<-c("1","0")
target_c<-c("Throw away")
vase_data_b<-filter(vase_data,!ConditionCode %in% target_a,)
vase_data_b<-filter(vase_data_b,!QuestionResult %in% target_b)
vase_data_b<-vase_data_b %>% mutate(ConditionName = ConditionCode)
#adding effect names column to data
vase_data_b<-name_conditions(vase_data_b)
vase_data_b<-filter(vase_data_b, !ConditionName %in% target_c)
#create a column of run numbers
vase_data_b<-vase_data_b %>% group_by(ConditionName) %>% mutate(Run = dense_rank(BlockNumber))
qagg<-vase_data_b %>% group_by(Run,ConditionName,QuestionResult) %>% tally()
filter_hits <-qagg$QuestionResult=="MarkedTargetHit"
qagg_b<-qagg[filter_hits,]
qagg_c<-subset(qagg_b,select=-c(QuestionResult))
qagg_c<-qagg_c[order(qagg_c$ConditionName),]
names(qagg_c)<-c("Run","ConditionName","Count")
#divide number of hits with max number of steps*2 in each run
num_of_vases<-step_count[order(step_count$ConditionName),]$Steps*2
target_hits<-qagg_c$Count/num_of_vases
qagg_c$Count<-target_hits
names(qagg_c)<-c("Run","ConditionName","%_Hits")
vase_hits<-qagg_c %>% pull("%_Hits")
#vase_hit_length<-length(vase_hits)
#place them in table by block or run
dhits<-qagg_c$`%_Hits`[seq(1,length(qagg_c),2)]
ahits<-qagg_c$`%_Hits`[seq(2,length(qagg_c)+1,2)]
table_summary<-table_summary %>% mutate(hits1 = dhits)
table_summary<-table_summary %>% mutate(hits2 = ahits)
#name rows by condition
#rownames(table_summary)<-ConditionName_vec
#what was the response time for answering the question?
#filtering
filter_qrt <-vase_data$ResponseTime>0
qrt<-vase_data[filter_qrt,]
filter_qid <-qrt$QuestionID==88
qrt<-qrt[filter_qid,]
#naming
qrt<-qrt %>% mutate(ConditionName = ConditionCode)
#adding effect names column
qrt<-name_conditions(qrt)
qrt<-filter(qrt, !ConditionName %in% target_c)
#create a column of run numbers
qrt<-qrt %>% group_by(ConditionName) %>% mutate(Run = dense_rank(BlockNumber))
#summarize question reaction times
Q_rt<-summaryBy(ResponseTime ~ ConditionName+Run, data=qrt, FUN=function(x) {m=mean(x)},keep.names=TRUE)
Q_RT <- Q_rt %>% pull("ResponseTime")
#Q_RT_length<-length(Q_RT)
#place them in sequences
d_rt<-Q_rt$ResponseTime[seq(1,length(Q_RT),2)]
a_rt<-Q_rt$ResponseTime[seq(2,length(Q_RT)+1,2)]
table_summary<-table_summary %>% mutate(rt1 = d_rt)
table_summary<-table_summary %>% mutate(rt2 = a_rt)
#how many neg pos answers??
positive_ans<-summaryBy(PositiveAnswersCount ~ Run+ConditionName, data=data_cs, FUN=function(x) {max=max(x,na.rm = TRUE)},keep.names=TRUE)
negative_ans<-summaryBy(NegativeAnswersCount ~ Run+ConditionName, data=data_cs, FUN=function(x) {max=max(x,na.rm = TRUE)},keep.names=TRUE)
pos_a<-positive_ans %>% pull("PositiveAnswersCount")
neg_a<-negative_ans %>% pull("NegativeAnswersCount")
pos_a_length<-length(pos_a)
neg_a_length<-length(neg_a)
table_summary<-table_summary %>% mutate(pos1 = pos_a[1:(pos_a_length/2)])
table_summary<-table_summary %>% mutate(pos2 = pos_a[((pos_a_length/2)+1):(pos_a_length)])
table_summary<-table_summary %>% mutate(neg1 = neg_a[1:(neg_a_length/2)])
table_summary<-table_summary %>% mutate(neg2 = neg_a[((neg_a_length/2)+1):(neg_a_length)])
rownames(table_summary)<-ConditionName_vec
table_summary<-table_summary %>% mutate(ConditionName = ConditionName_vec)
#what was the range of practical values (i.e. where did they start and stop seeing the condition, and within this range where does the variability reside?)
data_cs<-data_cs %>% mutate(Detect = abs(StairCaseValue*as.numeric(as.character(QuestionResult))))
data_cs$Detect[data_cs$Detect==0]<-NA
#here is a problem, we are not treating the blocks seperately
value_range<-summaryBy(Detect ~ BlockNumber+ConditionName, data=data_cs, FUN=function(x) {c (max=max(x,na.rm=TRUE),min=min(x,na.rm=TRUE))},keep.names=TRUE)
#we have to order the rows alphabetically so they fit in the right place in table_summary
value_range<-value_range[order(value_range$ConditionName),]
val_rang1<- value_range %>% pull(Detect.max)
val_rang2<- value_range %>% pull(Detect.min)
#pick first run and then 2nd run
dtop<-val_rang1[seq(1,length(val_rang1),2)]
atop<-val_rang1[seq(2,length(val_rang1),2)]
dlow<-val_rang2[seq(1,length(val_rang2),2)]
alow<-val_rang2[seq(2,length(val_rang2),2)]
table_summary<-table_summary %>% mutate(Dtop_range = dtop)
table_summary<-table_summary %>% mutate(Atop_range = atop)
table_summary<-table_summary %>% mutate(Dlow_range = dlow)
table_summary<-table_summary %>% mutate(Alow_range = alow)
data_cs<-data_cs %>% mutate(unDetect = as.numeric(as.character(QuestionResult)))
data_cs$unDetect[data_cs$unDetect==1]<-NA
data_cs$unDetect[data_cs$unDetect==0]<-1
data_cs$unDetect<-data_cs$unDetect*data_cs$StairCaseValue
undetected_range<-summaryBy(unDetect ~ BlockNumber+ConditionName, data=data_cs, FUN=function(x) {c(max=max(x,na.rm=TRUE),min=min(x,na.rm=TRUE))},keep.names=TRUE)
un_rang1<- undetected_range %>% pull(unDetect.max)
un_rang2<- undetected_range %>% pull(unDetect.min)
#pick first run then 2nd run
dtop_un<-un_rang1[seq(1,length(un_rang1),2)]
atop_un<-un_rang1[seq(2,length(un_rang1),2)]
dlow_un<-un_rang2[seq(1,length(un_rang2),2)]
alow_un<-un_rang2[seq(2,length(un_rang2),2)]
table_summary<-table_summary %>% mutate(Dt_und = dtop_un)
table_summary<-table_summary %>% mutate(At_und = atop_un)
table_summary<-table_summary %>% mutate(Dl_und = dlow_un)
table_summary<-table_summary %>% mutate(Al_und = alow_un)
#general stuff:
no_ans_in_time<-summary(data$QuestionResult)[4]#getting the 4th column of this summary
blocks<-length(unique(data_cs$BlockNumber))#getting number of blocks we ran
vase_score<-summary(data$QuestionResult)[3]/sum(num_of_vases)#getting the percent of correct target hits
names(vase_score)<-c("Vase Score")
vase_score<-round(vase_score,2)
#wrong answers
#make sure all are numeric values
#table_summary<-as.numeric(as.character(table_summary))
#round numbers - Idk why but I had to round these columns one at a time, stupid R/stupid Gadi
table_summary$hits1<-round(table_summary$hits1,digits=3)
table_summary$hits2<-round(table_summary$hits2,digits=3)
table_summary$rt1<-round(table_summary$rt1,digits=3)
table_summary$rt2<-round(table_summary$rt2,digits=3)
#adding fitted threshold values and R^2
#table_summary<-table_summary %>% mutate(ConditionName = ConditionName_vec)
#ask for JND thresholds csv
print("Choose the subjects' JND thresholds.csv file")
filename2<-file.choose(new=FALSE);
#read JND output csv filename
th_csv<-read.csv(filename2);
#create level columns before looping
table_summary<-table_summary %>% mutate(L1 = ConditionName)
table_summary<-table_summary %>% mutate(L2 = ConditionName)
table_summary<-table_summary %>% mutate(L3 = ConditionName)
table_summary<-table_summary %>% mutate(L4 = ConditionName)
table_summary<-table_summary %>% mutate(pseudo_R_sqr = ConditionName)
for (i in 1:length(ConditionName_vec)){
x<-ConditionName_vec[i]
levels<-th_csv$stim_val[th_csv$Condition==x]
t_levels<-transpose(as.list(levels))
table_summary[table_summary$ConditionName==x,c("L1","L2","L3","L4")]<-round(unlist(t_levels),4)
table_summary[table_summary$ConditionName==x,"pseudo_R_sqr"]<-round(max(th_csv$pr2[th_csv$Condition==x]),2)
}
rownames(table_summary)<-ConditionName_vec
#name columns
#colnames(table_summary)
column_names<-c("Average Reversal Value 1","Average Reversal Value  2","Average Reversal","Number of Reversals 1","Number of Reversals 2","Number of Steps 1","Number of Steps 2","Average Number of Steps","% Vase Hits 1","% Vase Hits 2","Question RT 1","Question RT 2","Positive Ans 1","Positive Ans 2","Negative Ans 1","Negative Ans 2","High Range 1","High Range 2","Low Range 1","Low Range 2","High Miss 1","High Miss 2","Low Miss 1","Low Miss 2","ConditionName","%20 Detection","%50 Detection","%75 Detection","%95 Detection","Pseudo R Squared")
colnames(table_summary)<-column_names
#name rows by condition
rownames(table_summary)<-ConditionName_vec
#name columns
#colnames(table_summary)
column_names<-c("Average Reversal Value 1","Average Reversal Value  2","Average Reversal","Number of Reversals 1","Number of Reversals 2","Number of Steps 1","Number of Steps 2","Average Number of Steps","% Vase Hits 1","% Vase Hits 2","Question RT 1","Question RT 2","Positive Ans 1","Positive Ans 2","Negative Ans 1","Negative Ans 2","ConditionName","High Range 1","High Range 2","Low Range 1","Low Range 2","High Miss 1","High Miss 2","Low Miss 1","Low Miss 2","%20 Detection","%50 Detection","%75 Detection","%95 Detection","Pseudo R Squared")
colnames(table_summary)<-column_names
col_order <- c("ConditionName","Average Reversal Value 1","Average Reversal Value  2","Average Reversal","Number of Reversals 1","Number of Reversals 2","Number of Steps 1","Number of Steps 2","Average Number of Steps","% Vase Hits 1","% Vase Hits 2","Question RT 1","Question RT 2","Positive Ans 1","Negative Ans 1","Positive Ans 2","Negative Ans 2","High Range 1","High Range 2","Low Range 1","Low Range 2","High Miss 1","High Miss 2","Low Miss 1","Low Miss 2","%20 Detection","%50 Detection","%75 Detection","%95 Detection","Pseudo R Squared")
table_summary <- table_summary[, col_order]
create input in template form
#create input in template form
setwd("C:\\Users\\User\\Desktop\\Unreal_Scripts")
#sub<-readr::parse_number(basename(unreal_rand_temp))
filename<-gsub(" ","",paste("jnd_summary",as.character(sub_n),".csv"))
fwrite(table_summary,filename,col.names=TRUE,row.names = TRUE)
#fwrite(data_cs,'pGD_2sc.csv',col.names=TRUE)
print("I am complete")
setwd("C:\\Users\\User\\Desktop\\Unreal_Scripts\\jnd_validate")
#sub<-readr::parse_number(basename(unreal_rand_temp))
filename<-gsub(" ","",paste("jnd_summary",as.character(sub_n),".csv"))
fwrite(table_summary,filename,col.names=TRUE,row.names = TRUE)
#fwrite(data_cs,'pGD_2sc.csv',col.names=TRUE)
print("I am complete")
#sub<-readr::parse_number(basename(unreal_rand_temp))
filename<-gsub(" ","",paste("jnd_summary_subject_",as.character(sub_n),".csv"))
fwrite(table_summary,filename,col.names=TRUE,row.names = TRUE)
#fwrite(data_cs,'pGD_2sc.csv',col.names=TRUE)
print("I am complete")
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/run_unreal_psy.R', echo=TRUE)
#Parameters
library(stringi)
#working directory
setwd('C:\\Users\\User\\Desktop\\unreal_psychophysics\\rdas')
sub_num<-readline(prompt = "Subject number:")
subject_folder<-paste("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_",sub_num)
load("run_unreal_psy.rda")
run_unreal_psy(subject_folder,attempt)
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/run_unreal_psy.R', echo=TRUE)
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",18)
C:\Users\User\Desktop\unreal_psychophysics\rdas
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/run_unreal_psy.R', echo=TRUE)
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",18)
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/psy_paths.R', echo=TRUE)
save(psy_paths, file='C:\\Users\\User\\Desktop\\unreal_psychophysics\\rdas\\psy_paths.rda')
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",18)
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",19)
source("C:/Users/user/Desktop/unreal_psychophysics/load_function_unreal.R")
source("C:/Users/user/Desktop/unreal_psychophysics/load_function_unreal.R")
source("C:/Users/user/Desktop/unreal_psychophysics/load_function_unreal.R")
