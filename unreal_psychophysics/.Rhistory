load(here("rdas","psy_paths.rda"))
load(here("rdas","run_unreal_psy.rda"))
repeat_number<-as.numeric(attempt)-1;
#load the answers csv of the repeated staircases
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
here("Studies",study,sub_folder_name)
#load the answers csv of the repeated staircases
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
unlink(here("Studies",study,sub_folder_name,repeat_file))
#load the previous attempt csv (there should be only one attempt file in the folder)
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_data<-import(here("Studies",study,sub_folder_name,previous_attempt_file))
unlink(here("Studies",study,sub_folder_name,previous_attempt_file))
#make a unique vector of the condition codes used in the repeat TrialNumber column
repeat_codes<-unique(repeat_data$TrialNumber)
#turn all codes into the 3 first digits
repeat_codes<-as.numeric(substr(repeat_codes,1,3))
#make a new column of codes with only 3 digits or less
previous_attempt_data<-previous_attempt_data %>% mutate(short_code = TrialNumber)
previous_attempt_data$short_code<-as.numeric(substr(previous_attempt_data$short_code,1,3))
#remove rows with these codes from previous attempt data
cleaned_previous_data<-previous_attempt_data  %>% filter(!short_code %in% repeat_codes)
#remove short_code column
cleaned_previous_data<-subset(cleaned_previous_data, select = -c(short_code))
#fix block number or step number for new conditions
last_block<-max(previous_attempt_data$BlockNumber)
#add block number to the block numbers in the repeat data
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]<-repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
#add the number of times this condition has been run
repeat_data<- repeat_data %>% mutate(Attempt = as.numeric(attempt))
#rbind repeat to cleaned attempt df
previous_attempt_plus_repeat<-rbind(cleaned_previous_data,repeat_data)
previous_attempt_file<-stri_sub(previous_attempt_file,1,-5)
#save the new data frame as an 'Answers' file
filename<-gsub(" ","",paste(previous_attempt_file,"_",as.character(attempt),"_.csv"))
export(previous_attempt_plus_repeat,here("Studies",study,sub_folder_name,filename),col.names=TRUE)
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
source(here("post_fit_adjustments.R"))
source(here("threshold_fix.R"))
source(here("shift_conditions.R"))
source(here("plot_staircase.R"))
source(here("plot_staircase_unity.R"))
source(here("repeat_jnd.R"))
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
study=readline("Study folder name:")
sub_n<- readline(prompt = "Subject number:");
attempt<- readline(prompt = "Staircase attempt number:");
sub_folder_name<-paste0("sub_",sub_n)
repeat_number<-as.numeric(attempt)-1;
#load the answers csv of the repeated staircases
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
unlink(here("Studies",study,sub_folder_name,repeat_file))
#load the previous attempt csv (there should be only one attempt file in the folder)
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_data<-import(here("Studies",study,sub_folder_name,previous_attempt_file))
unlink(here("Studies",study,sub_folder_name,previous_attempt_file))
#make a unique vector of the condition codes used in the repeat TrialNumber column
repeat_codes<-unique(repeat_data$TrialNumber)
#turn all codes into the 3 first digits
repeat_codes<-as.numeric(substr(repeat_codes,1,3))
#make a new column of codes with only 3 digits or less
previous_attempt_data<-previous_attempt_data %>% mutate(short_code = TrialNumber)
previous_attempt_data$short_code<-as.numeric(substr(previous_attempt_data$short_code,1,3))
#remove rows with these codes from previous attempt data
cleaned_previous_data<-previous_attempt_data  %>% filter(!short_code %in% repeat_codes)
#remove short_code column
cleaned_previous_data<-subset(cleaned_previous_data, select = -c(short_code))
#fix block number or step number for new conditions
last_block<-max(previous_attempt_data$BlockNumber)
#add block number to the block numbers in the repeat data
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]<-repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
#add the number of times this condition has been run
repeat_data<- repeat_data %>% mutate(Attempt = as.numeric(attempt))
#rbind repeat to cleaned attempt df
previous_attempt_plus_repeat<-rbind(cleaned_previous_data,repeat_data)
previous_attempt_file<-stri_sub(previous_attempt_file,1,-5)
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_file
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
unlink(here("Studies",study,sub_folder_name,repeat_file))
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_data<-import(here("Studies",study,sub_folder_name,previous_attempt_file))
previous_attempt_file
previous_attempt_data<-import(here("Studies",study,sub_folder_name,previous_attempt_file))
unlink(here("Studies",study,sub_folder_name,previous_attempt_file))
repeat_codes<-unique(repeat_data$TrialNumber)
#turn all codes into the 3 first digits
repeat_codes<-as.numeric(substr(repeat_codes,1,3))
#make a new column of codes with only 3 digits or less
previous_attempt_data<-previous_attempt_data %>% mutate(short_code = TrialNumber)
previous_attempt_data$short_code<-as.numeric(substr(previous_attempt_data$short_code,1,3))
#remove rows with these codes from previous attempt data
cleaned_previous_data<-previous_attempt_data  %>% filter(!short_code %in% repeat_codes)
#remove short_code column
cleaned_previous_data<-subset(cleaned_previous_data, select = -c(short_code))
#fix block number or step number for new conditions
last_block<-max(previous_attempt_data$BlockNumber)
#add block number to the block numbers in the repeat data
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]<-repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
#add the number of times this condition has been run
repeat_data<- repeat_data %>% mutate(Attempt = as.numeric(attempt))
stri_sub(previous_attempt_file,1,-5)
previous_attempt_plus_repeat<-rbind(cleaned_previous_data,repeat_data)
View(previous_attempt_plus_repeat)
previous_attempt_file<-stri_sub(previous_attempt_file,1,-5)
previous_attempt_file
#save the new data frame as an 'Answers' file
filename<-gsub(" ","",paste(previous_attempt_file,"_",as.character(attempt),"_.csv"))
filename
export(previous_attempt_plus_repeat,here("Studies",study,sub_folder_name,filename),col.names=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
study=readline("Study folder name:")
sub_n<- readline("Subject number:")
sub_n
attempt<- readline(prompt = "Staircase attempt number:");
attempt
sub_folder_name<-paste0("sub_",sub_n)
sub_folder_name
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
unlink(here("Studies",study,sub_folder_name,repeat_file))
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_data<-import(here("Studies",study,sub_folder_name,previous_attempt_file))
unlink(here("Studies",study,sub_folder_name,previous_attempt_file))
#make a unique vector of the condition codes used in the repeat TrialNumber column
repeat_codes<-unique(repeat_data$TrialNumber)
#turn all codes into the 3 first digits
repeat_codes<-as.numeric(substr(repeat_codes,1,3))
#make a new column of codes with only 3 digits or less
previous_attempt_data<-previous_attempt_data %>% mutate(short_code = TrialNumber)
previous_attempt_data$short_code<-as.numeric(substr(previous_attempt_data$short_code,1,3))
#remove rows with these codes from previous attempt data
cleaned_previous_data<-previous_attempt_data  %>% filter(!short_code %in% repeat_codes)
#remove short_code column
cleaned_previous_data<-subset(cleaned_previous_data, select = -c(short_code))
#fix block number or step number for new conditions
last_block<-max(previous_attempt_data$BlockNumber)
#add block number to the block numbers in the repeat data
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]<-repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
#add the number of times this condition has been run
repeat_data<- repeat_data %>% mutate(Attempt = as.numeric(attempt))
#rbind repeat to cleaned attempt df
previous_attempt_plus_repeat<-rbind(cleaned_previous_data,repeat_data)
previous_attempt_file<-stri_sub(previous_attempt_file,1,-5)
#save the new data frame as an 'Answers' file
filename<-gsub(" ","",paste(previous_attempt_file,"_",as.character(attempt),"_.csv"))
export(previous_attempt_plus_repeat,here("Studies",study,sub_folder_name,filename),col.names=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd_2.R", echo=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/R_functions/repeat_jnd.R", echo=TRUE)
source("C:/Users/User/OneDrive/Desktop/unreal_psychophysics/R_functions/repeat_jnd.R", echo=TRUE)
source(here("repeat_list.R"))
source(here("repeat_jnd.R"))
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_list.R", echo=TRUE)
here("Studies",study,sub_folder_name,filename)
here("Studies",study,sub_folder_name)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
repeat_data$BlockNumber
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
last_block
View(repeat_data)
list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1]
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
here()
renv::activate()
renv::restore()
here()
sessionInfo()
renv::status()
here::here()
here()
here::here()
list.files(here())
list.files(here::here())
study=readline("Study folder name:")
sub_n = readline("Subject number:")
attempt= readline(prompt = "Fitting attempt number:")
source(here("preprocessing.R"))
sub_folder_name<-gsub(" ","",paste("sub_",sub_n))
?gsub
library(here)
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
source(here("post_fit_adjustments.R"))
source(here("threshold_fix.R"))
source(here("shift_conditions.R"))
source(here("plot_staircase.R"))
source(here("plot_staircase_unity.R"))
source(here("repeat_list.R"))
study=readline("Study folder name:")
subject_folder<-here("Studies",study,sub_folder_name)
results_folder_name<-gsub(" ","",paste("results_sub_",sub_n,'_attempt_',as.character(attempt)))
results_folder<-here("Studies",study,sub_folder_name,results_folder_name)
input_folder_name<- gsub(" ","",paste("unreal_input_sub_",sub_n,'_attempt_',as.character(attempt)))
unreal_input_folder<- gsub(" ","",paste(results_folder,"/",input_folder_name))
#list of folder names
folder_names<-list(sub_folder_name,results_folder_name,input_folder_name)
#create subject results folder
here(study,sub_folder_name,try(dir.create(results_folder),silent=TRUE))
#create subject input folder for next experiment
here(study,sub_folder_name,results_folder,try(dir.create(unreal_input_folder),silent=TRUE))
data_cf<-preprocessing()
source(here("preprocessing.R"))
data_cf<-preprocessing()
warnings()
cat("Matlab is fitting the data","\n")
run_matlab_script(here("unreal_fit.m"),display=FALSE,verbose=FALSE)
import(paste0(sub_n,"fits.png"))
import(paste0(sub_n,"_fits.png"))
png::readPNG(paste0(sub_n,"_fits.png"))
install.packages("png")
renv::snapshot()
m_plot<-png::readPNG(paste0(sub_n,"_fits.png"))
m_plot
export(m_plot,here("Studies",study,sub_folder_name,results_folder_name))
export(m_plot,here("Studies",study,sub_folder_name,results_folder_name,paste0(sub_n,"_fits.png")))
m_plot_name<-paste0(sub_n,"_fits.png")
m_plot<-png::readPNG(m_plot_name)
export(m_plot,here("Studies",study,sub_folder_name,results_folder_name,m_plot_name))
png_to_grob()
here(m_plot_name)
file.rename(from=here(m_plot_name),to=here("Studies",study,sub_folder_name,results_folder_name,m_plot_name))
jnd_thresholds<-post_fit_adjustments()
fitted_file<-gsub(" ","",paste("threshold_values_sub_",sub_n,".csv"))
jnd_thresholds<-import(here("output_matlab",fitted_file))
source(here("post_fit_adjustments.R"))
jnd_thresholds<-post_fit_adjustments()
ConditionName_vec<-unique(as.vector(data_cf$ConditionName))
ConditionName_vec<-ConditionName_vec[order(ConditionName_vec)]
jnd_thresholds<-post_fit_adjustments()
source(here("post_fit_adjustments.R"))
jnd_thresholds<-post_fit_adjustments()
threshold_fix(jnd_thresholds,folder_names,sub_n,study)
jnd_adjusted_thresholds<-shift_conditions()
plot_staircase(con_name,data_cf,jnd_adjusted_thresholds)
View(plot_staircase)
make_plots()
source(here("make_plots.R"))
make_plots()
ConditionName_vec<-unique(as.vector(data_cf$ConditionName))
ConditionName_vec<-ConditionName_vec[order(ConditionName_vec)]
make_plots()
make_plots(data_cf,jnd_adjusted_thresholds,ConditionName_vec)
#place stimuli in empty input file
load_thresholds(folder_names,sub_n)
source(here("load_thresholds.R"))
source(here("load_thresholds_fmri.R"))
#place stimuli in empty input file
load_thresholds(folder_names,sub_n)
#load the StaircaseCommands template for fmri/eeg
filename_imaging<-gsub(" ","",paste("unreal_input_",sub_n,".csv"));
unreal_rt<-import(here("unreal_random_temps",filename))
unreal_rt<-import(here("unreal_random_temps",filename_imaging))
source(here("load_thresholds.R"))
#place stimuli in empty input file
load_thresholds(folder_names,sub_n)
load_thresholds_fmri(folder_names,sub_n,study)
#doAgain contains a list of the conditions we need to redo
experiment_folder_path<-here("Unreal_Experiment","UnrealData","Plans","repeat_JND")
basedir<-here()
doAgain_f<-paste0("doAgain_values_sub_",sub_n,".csv")
if (file.exists(here("output_matlab",doAgain_f))){
doAgain<-import(here("output_matlab",doAgain_f),header=TRUE, stringsAsFactors = TRUE);
repeat_list(folder_names,sub_n,attempt,doAgain,experiment_folder_path)
} else {cat('\n','No repeats needed','\n')}
#load the answers csv of the repeated staircases
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
#load the answers csv of the repeated staircases
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
unlink(here("Studies",study,sub_folder_name,repeat_file))
#load the previous attempt csv (there should be only one attempt file in the folder)
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_data<-import(here("Studies",study,sub_folder_name,previous_attempt_file))
unlink(here("Studies",study,sub_folder_name,previous_attempt_file))
#make a unique vector of the condition codes used in the repeat TrialNumber column
repeat_codes<-unique(repeat_data$TrialNumber)
#turn all codes into the 3 first digits
repeat_codes<-as.numeric(substr(repeat_codes,1,3))
#make a new column of codes with only 3 digits or less
previous_attempt_data<-previous_attempt_data %>% mutate(short_code = TrialNumber)
previous_attempt_data$short_code<-as.numeric(substr(previous_attempt_data$short_code,1,3))
#remove rows with these codes from previous attempt data
cleaned_previous_data<-previous_attempt_data  %>% filter(!short_code %in% repeat_codes)
#remove short_code column
cleaned_previous_data<-subset(cleaned_previous_data, select = -c(short_code))
#fix block number or step number for new conditions
last_block<-max(previous_attempt_data$BlockNumber)
#add block number to the block numbers in the repeat data
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]<-repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
#add the number of times this condition has been run
repeat_data<- repeat_data %>% mutate(Attempt = as.numeric(attempt))
#rbind repeat to cleaned attempt df
previous_attempt_plus_repeat<-rbind(cleaned_previous_data,repeat_data)
previous_attempt_file<-stri_sub(previous_attempt_file,1,-5)
#save the new data frame as an 'Answers' file
filename<-gsub(" ","",paste(previous_attempt_file,"_",as.character(attempt),"_.csv"))
export(previous_attempt_plus_repeat,here("Studies",study,sub_folder_name,filename),col.names=TRUE)
run_unreal_psy()
source(here("run_unreal_psy.R"))
run_unreal_psy()
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
run_unreal_psy()
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
run_unreal_psy()
randomly_space_trials <- function(trials, event_to_space, desired_spacing) {
# Identify the indices of the specific event
event_indices <- which(trials == event_to_space)
# Shuffle the non-event trials
non_event_indices <- setdiff(1:length(trials), event_indices)
shuffled_non_event <- sample(non_event_indices)
# Create a vector to store the spaced trials
spaced_trials <- numeric(length(trials))
# Place the spaced event at the beginning
spaced_trials[1] <- event_to_space
current_index <- 1
# Space out the remaining events
for (i in 1:(length(trials) - 1)) {
current_index <- current_index + desired_spacing
# Check if the index exceeds the length of the vector
if (current_index > length(trials)) {
current_index <- current_index - length(trials)
}
spaced_trials[current_index] <- trials[i + 1]
}
return(spaced_trials)
}
# Example usage:
set.seed(123)  # for reproducibility
trials <- rep(c(1, 2, 3, 4444), each = 5)  # example data
spaced_trials <- randomly_space_trials(trials, event_to_space = 4444, desired_spacing = 3)
# View the result
print(spaced_trials)
randomly_space_event_indexes <- function(trials, event_to_space, desired_spacing) {
# Identify the indices of the specific event
event_indices <- which(trials == event_to_space)
# Shuffle the non-event trials
non_event_indices <- setdiff(1:length(trials), event_indices)
shuffled_non_event <- sample(non_event_indices)
# Create a vector to store the spaced event indexes
spaced_event_indexes <- numeric(length(event_indices))
# Place the spaced event indexes at the beginning
spaced_event_indexes[1] <- event_indices[1]
current_index <- 1
# Space out the remaining event indexes
for (i in 1:(length(event_indices) - 1)) {
current_index <- current_index + desired_spacing
# Check if the index exceeds the length of the vector
if (current_index > length(event_indices)) {
current_index <- current_index - length(event_indices)
}
spaced_event_indexes[i + 1] <- event_indices[current_index]
}
return(spaced_event_indexes)
}
# Example usage:
set.seed(123)  # for reproducibility
trials <- rep(c(1, 2, 3, 4444), each = 5)  # example data
event_indexes <- randomly_space_event_indexes(trials, event_to_space = 4444, desired_spacing = 3)
# View the result
print(event_indexes)
legnth(spaced_trials)
randomly_space_event_indexes_fixed_length <- function(total_length, num_event_indexes, event_to_space, desired_spacing) {
# Create a vector to store the spaced event indexes
spaced_event_indexes <- numeric(total_length)
# Identify the indices of the specific event
event_indices <- which(spaced_event_indexes == event_to_space)
# Shuffle the non-event indices
non_event_indices <- setdiff(1:total_length, event_indices)
shuffled_non_event <- sample(non_event_indices)
# Place the spaced event indexes at the beginning
spaced_event_indexes[1:num_event_indexes] <- event_indices[1:num_event_indexes]
current_index <- num_event_indexes + 1
# Space out the remaining event indexes
for (i in (num_event_indexes + 1):(total_length - num_event_indexes)) {
current_index <- current_index + desired_spacing
# Check if the index exceeds the length of the vector
if (current_index > (total_length - num_event_indexes)) {
current_index <- current_index - (total_length - num_event_indexes)
}
spaced_event_indexes[i] <- shuffled_non_event[current_index]
}
return(spaced_event_indexes)
}
# Example usage:
set.seed(123)  # for reproducibility
total_length <- 63
num_event_indexes <- 21
event_to_space <- 4444
desired_spacing <- 3
event_indexes <- randomly_space_event_indexes_fixed_length(total_length, num_event_indexes, event_to_space, desired_spacing)
# View the result
print(event_indexes)
randomly_space_event_indexes_fixed_length <- function(total_length, num_event_indexes, event_to_space, desired_spacing) {
# Create a vector to store the spaced event indexes
spaced_event_indexes <- numeric(total_length)
# Identify the indices of the specific event
event_indices <- which(spaced_event_indexes == event_to_space)
# Shuffle the non-event indices
non_event_indices <- setdiff(1:total_length, event_indices)
shuffled_non_event <- sample(non_event_indices)
# Place the spaced event indexes at the beginning
spaced_event_indexes[1:num_event_indexes] <- event_indices[1:num_event_indexes]
current_index <- num_event_indexes + 1
# Space out the remaining event indexes
for (i in (num_event_indexes + 1):(total_length - num_event_indexes)) {
current_index <- current_index + desired_spacing
# Check if the index exceeds the length of the vector
if (current_index > (total_length - num_event_indexes)) {
current_index <- current_index - (total_length - num_event_indexes)
}
spaced_event_indexes[i] <- shuffled_non_event[current_index]
}
return(spaced_event_indexes)
}
# Example usage:
set.seed(123)  # for reproducibility
total_length <- 63
num_event_indexes <- 21
event_to_space <- 4444
desired_spacing <- 3
event_indexes <- randomly_space_event_indexes_fixed_length(total_length, num_event_indexes, event_to_space, desired_spacing)
# View the result
print(event_indexes)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
run_unreal_psy()
warnings()
study=readline("Study folder name:")
study=readline("Study folder name:")
sub_n = readline("Subject number:")
attempt= readline(prompt = "Fitting attempt number:")
library(here)
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
source(here("post_fit_adjustments.R"))
source(here("threshold_fix.R"))
source(here("shift_conditions.R"))
source(here("plot_staircase.R"))
source(here("plot_staircase_unity.R"))
source(here("repeat_list.R"))
source(here("make_plots.R"))
source(here("load_thresholds.R"))
source(here("load_thresholds_fmri.R"))
sub_folder_name<-gsub(" ","",paste("sub_",sub_n))
subject_folder<-here("Studies",study,sub_folder_name)
results_folder_name<-gsub(" ","",paste("results_sub_",sub_n,'_attempt_',as.character(attempt)))
results_folder<-here("Studies",study,sub_folder_name,results_folder_name)
input_folder_name<- gsub(" ","",paste("unreal_input_sub_",sub_n,'_attempt_',as.character(attempt)))
unreal_input_folder<- gsub(" ","",paste(results_folder,"/",input_folder_name))
#list of folder names
folder_names<-list(sub_folder_name,results_folder_name,input_folder_name)
sub_folder_name<-unlist(folder_names)[1]
results_folder_name<-unlist(folder_names)[2]
input_folder_name<-unlist(folder_names)[3]
#load thresholds csv: filename+subject, folder path
#set the filename, always take the file called Answers...something...csv
filename_t<-list.files(here("Studies",study,sub_folder_name,results_folder_name), pattern=glob2rx("threshold_values*.csv"))[1]
#read JND output csv filename
thresholds<-import(here("Studies",study,sub_folder_name,results_folder_name,filename_t));
#filename_temp<-list.files(here("unreal_random_temps"), pattern=glob2rx())
#read staircase template csv filename
SCtemplate<-import(here("unreal_random_temps","StaircaseCommands_imaging_template.csv"));
#filter 2nd and 4th levels
thresholds_lvls<-thresholds %>% filter(Level==1|Level==2)
View(thresholds_lvls)
View(SCtemplate)
SCtemplate$initialValue[-1]
SCtemplate$initialValue[-1]<-thresholds_lvls$shifted_threshold
SCtemplate$initialValue<-as.numeric(SCtemplate$initialValue)
#add two right side plant rows
two_plant_rows<-SCtemplate[SCtemplate$Condition=="Plant",]
#make them negative and change the staircase codes to 3812, 3814
two_plant_rows$"#stairCaseSerialID"[1]<-3812
two_plant_rows$"#stairCaseSerialID"[2]<-3814
two_plant_rows$initialValue[1]<-two_plant_rows$initialValue[1]*(-1)
two_plant_rows$initialValue[2]<-two_plant_rows$initialValue[2]*(-1)
#add the two new rows to the SCtemplate
SCtemplate<-rbind(SCtemplate,two_plant_rows)
#remove first column we do not need it
SCtemplate<-SCtemplate[,-1]
filename<-"StaircaseCommands.csv"
export(SCtemplate,here("Experiment","UnrealData","Plans","Unreal",filename),col.names=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
run_unreal_psy()
run_unreal_psy()
run_unreal_psy()
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/load_thresholds_fmri.R", echo=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
run_unreal_psy()
source("run_unreal_psy.R")
run_unreal_psy()
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
run_unreal_psy()
cat('* * * Finished * * *')
cat('* * * * Finished * * * *')
cat('              * * * * Finished * * * *              ')
cat('* * * * * * * * * * * * Finished * * * * * * * * * * * * * * * * ')
cat('* * * * * * * * * * * * * * * * Finished * * * * * * * * * * * * * * * * * * * *')
cat('* * * * * * * * * * * * * * * * The End * * * * * * * * * * * * * * * * * * * *')
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
run_unreal_psy()
run_unreal_psy()
run_unreal_psy()
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
run_unreal_psy()
