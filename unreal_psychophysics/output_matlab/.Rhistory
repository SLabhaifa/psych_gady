table_summary<-table_summary %>% mutate(neg1 = neg_a[1:(neg_a_length/2)])
table_summary<-table_summary %>% mutate(neg2 = neg_a[((neg_a_length/2)+1):(neg_a_length)])
rownames(table_summary)<-ConditionName_vec
table_summary<-table_summary %>% mutate(ConditionName = ConditionName_vec)
#what was the range of practical values (i.e. where did they start and stop seeing the condition, and within this range where does the variability reside?)
data_cs<-data_cs %>% mutate(Detect = abs(StairCaseValue*as.numeric(as.character(QuestionResult))))
data_cs$Detect[data_cs$Detect==0]<-NA
#here is a problem, we are not treating the blocks seperately
value_range<-summaryBy(Detect ~ BlockNumber+ConditionName, data=data_cs, FUN=function(x) {c (max=max(x,na.rm=TRUE),min=min(x,na.rm=TRUE))},keep.names=TRUE)
#we have to order the rows alphabetically so they fit in the right place in table_summary
value_range<-value_range[order(value_range$ConditionName),]
val_rang1<- value_range %>% pull(Detect.max)
val_rang2<- value_range %>% pull(Detect.min)
#pick first run and then 2nd run
dtop<-val_rang1[seq(1,length(val_rang1),2)]
atop<-val_rang1[seq(2,length(val_rang1),2)]
dlow<-val_rang2[seq(1,length(val_rang2),2)]
alow<-val_rang2[seq(2,length(val_rang2),2)]
table_summary<-table_summary %>% mutate(Dtop_range = dtop)
table_summary<-table_summary %>% mutate(Atop_range = atop)
table_summary<-table_summary %>% mutate(Dlow_range = dlow)
table_summary<-table_summary %>% mutate(Alow_range = alow)
data_cs<-data_cs %>% mutate(unDetect = as.numeric(as.character(QuestionResult)))
data_cs$unDetect[data_cs$unDetect==1]<-NA
data_cs$unDetect[data_cs$unDetect==0]<-1
data_cs$unDetect<-data_cs$unDetect*data_cs$StairCaseValue
undetected_range<-summaryBy(unDetect ~ BlockNumber+ConditionName, data=data_cs, FUN=function(x) {c(max=max(x,na.rm=TRUE),min=min(x,na.rm=TRUE))},keep.names=TRUE)
un_rang1<- undetected_range %>% pull(unDetect.max)
un_rang2<- undetected_range %>% pull(unDetect.min)
#pick first run then 2nd run
dtop_un<-un_rang1[seq(1,length(un_rang1),2)]
atop_un<-un_rang1[seq(2,length(un_rang1),2)]
dlow_un<-un_rang2[seq(1,length(un_rang2),2)]
alow_un<-un_rang2[seq(2,length(un_rang2),2)]
table_summary<-table_summary %>% mutate(Dt_und = dtop_un)
table_summary<-table_summary %>% mutate(At_und = atop_un)
table_summary<-table_summary %>% mutate(Dl_und = dlow_un)
table_summary<-table_summary %>% mutate(Al_und = alow_un)
#general stuff:
no_ans_in_time<-summary(data$QuestionResult)[4]#getting the 4th column of this summary
blocks<-length(unique(data_cs$BlockNumber))#getting number of blocks we ran
vase_score<-summary(data$QuestionResult)[3]/sum(num_of_vases)#getting the percent of correct target hits
names(vase_score)<-c("Vase Score")
vase_score<-round(vase_score,2)
#wrong answers
#make sure all are numeric values
#table_summary<-as.numeric(as.character(table_summary))
#round numbers - Idk why but I had to round these columns one at a time, stupid R/stupid Gadi
table_summary$hits1<-round(table_summary$hits1,digits=3)
table_summary$hits2<-round(table_summary$hits2,digits=3)
table_summary$rt1<-round(table_summary$rt1,digits=3)
table_summary$rt2<-round(table_summary$rt2,digits=3)
#adding fitted threshold values and R^2
#table_summary<-table_summary %>% mutate(ConditionName = ConditionName_vec)
#ask for JND thresholds csv
print("Choose the subjects' JND thresholds.csv file")
filename2<-file.choose(new=FALSE);
#read JND output csv filename
th_csv<-read.csv(filename2);
#create level columns before looping
table_summary<-table_summary %>% mutate(L1 = ConditionName)
table_summary<-table_summary %>% mutate(L2 = ConditionName)
table_summary<-table_summary %>% mutate(L3 = ConditionName)
table_summary<-table_summary %>% mutate(L4 = ConditionName)
table_summary<-table_summary %>% mutate(pseudo_R_sqr = ConditionName)
for (i in 1:length(ConditionName_vec)){
x<-ConditionName_vec[i]
levels<-th_csv$stim_val[th_csv$Condition==x]
t_levels<-transpose(as.list(levels))
table_summary[table_summary$ConditionName==x,c("L1","L2","L3","L4")]<-round(unlist(t_levels),4)
table_summary[table_summary$ConditionName==x,"pseudo_R_sqr"]<-round(max(th_csv$pr2[th_csv$Condition==x]),2)
}
rownames(table_summary)<-ConditionName_vec
#name columns
#colnames(table_summary)
column_names<-c("Average Reversal Value 1","Average Reversal Value  2","Average Reversal","Number of Reversals 1","Number of Reversals 2","Number of Steps 1","Number of Steps 2","Average Number of Steps","% Vase Hits 1","% Vase Hits 2","Question RT 1","Question RT 2","Positive Ans 1","Positive Ans 2","Negative Ans 1","Negative Ans 2","High Range 1","High Range 2","Low Range 1","Low Range 2","High Miss 1","High Miss 2","Low Miss 1","Low Miss 2","ConditionName","%20 Detection","%50 Detection","%75 Detection","%95 Detection","Pseudo R Squared")
colnames(table_summary)<-column_names
#name rows by condition
rownames(table_summary)<-ConditionName_vec
#name columns
#colnames(table_summary)
column_names<-c("Average Reversal Value 1","Average Reversal Value  2","Average Reversal","Number of Reversals 1","Number of Reversals 2","Number of Steps 1","Number of Steps 2","Average Number of Steps","% Vase Hits 1","% Vase Hits 2","Question RT 1","Question RT 2","Positive Ans 1","Positive Ans 2","Negative Ans 1","Negative Ans 2","ConditionName","High Range 1","High Range 2","Low Range 1","Low Range 2","High Miss 1","High Miss 2","Low Miss 1","Low Miss 2","%20 Detection","%50 Detection","%75 Detection","%95 Detection","Pseudo R Squared")
colnames(table_summary)<-column_names
col_order <- c("ConditionName","Average Reversal Value 1","Average Reversal Value  2","Average Reversal","Number of Reversals 1","Number of Reversals 2","Number of Steps 1","Number of Steps 2","Average Number of Steps","% Vase Hits 1","% Vase Hits 2","Question RT 1","Question RT 2","Positive Ans 1","Negative Ans 1","Positive Ans 2","Negative Ans 2","High Range 1","High Range 2","Low Range 1","Low Range 2","High Miss 1","High Miss 2","Low Miss 1","Low Miss 2","%20 Detection","%50 Detection","%75 Detection","%95 Detection","Pseudo R Squared")
table_summary <- table_summary[, col_order]
create input in template form
#create input in template form
setwd("C:\\Users\\User\\Desktop\\Unreal_Scripts")
#sub<-readr::parse_number(basename(unreal_rand_temp))
filename<-gsub(" ","",paste("jnd_summary",as.character(sub_n),".csv"))
fwrite(table_summary,filename,col.names=TRUE,row.names = TRUE)
#fwrite(data_cs,'pGD_2sc.csv',col.names=TRUE)
print("I am complete")
setwd("C:\\Users\\User\\Desktop\\Unreal_Scripts\\jnd_validate")
#sub<-readr::parse_number(basename(unreal_rand_temp))
filename<-gsub(" ","",paste("jnd_summary",as.character(sub_n),".csv"))
fwrite(table_summary,filename,col.names=TRUE,row.names = TRUE)
#fwrite(data_cs,'pGD_2sc.csv',col.names=TRUE)
print("I am complete")
#sub<-readr::parse_number(basename(unreal_rand_temp))
filename<-gsub(" ","",paste("jnd_summary_subject_",as.character(sub_n),".csv"))
fwrite(table_summary,filename,col.names=TRUE,row.names = TRUE)
#fwrite(data_cs,'pGD_2sc.csv',col.names=TRUE)
print("I am complete")
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/run_unreal_psy.R', echo=TRUE)
#Parameters
library(stringi)
#working directory
setwd('C:\\Users\\User\\Desktop\\unreal_psychophysics\\rdas')
sub_num<-readline(prompt = "Subject number:")
subject_folder<-paste("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_",sub_num)
load("run_unreal_psy.rda")
run_unreal_psy(subject_folder,attempt)
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/run_unreal_psy.R', echo=TRUE)
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",18)
C:\Users\User\Desktop\unreal_psychophysics\rdas
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/run_unreal_psy.R', echo=TRUE)
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",18)
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/psy_paths.R', echo=TRUE)
save(psy_paths, file='C:\\Users\\User\\Desktop\\unreal_psychophysics\\rdas\\psy_paths.rda')
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",18)
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",19)
source("C:/Users/user/Desktop/unreal_psychophysics/load_function_unreal.R")
source("C:/Users/user/Desktop/unreal_psychophysics/load_function_unreal.R")
source("C:/Users/user/Desktop/unreal_psychophysics/load_function_unreal.R")
source("C:/Users/User/Desktop/unreal_psychophysics/load_function_unreal.R", echo=TRUE)
run_unreal_psy()
?pmax()
numbers<-c(3.6175011031387,3.79545280722567,3.97340502984932,4.27239528925807)
desired_min<-numbers[1]
numbers<-c(4.49,4.63,4.77,5.01)
desired_min<-numbers[1]
desired_max<-4.6
scaled_numbers <- scale(numbers, center = FALSE, scale = diff(range(numbers)) / diff(range(c(desired_min, desired_max))),
to = c(desired_min, desired_max))
?scale()
scaled_numbers <- scale(numbers, center = FALSE, scale = diff(range(numbers)) / diff(range(c(desired_min, desired_max))))
scaled_numbers
scaled_numbers <- scale(numbers, center = FALSE, scale = diff(range(numbers)) / diff(range(c(desired_min, desired_max))),
to = c(desired_min, desired_max))
scaled_numbers <- scale(numbers, center = FALSE, scale = diff(range(numbers)) / diff(range(c(desired_min, desired_max))), to = c(desired_min, desired_max))
diff(range(numbers)) / diff(range(c(desired_min, desired_max)))
range(numbers)
?range()
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE,message=FALSE, warning=FALSE)
library(corrplot)
library(ggcorrplot)
library(PairedData)
library(broom)
library(cowplot)
library(data.table)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(gridExtra)
library(ggExtra)
library(ggsci)
library(ggthemes)
library(ggdist)
library(tidyquant)
library(janitor)
library(multcomp)
library(reshape2)
library(report)
library(rstatix)
library(scales)
library(stringi)
library(tidyr)
library(tibble)
library(RColorBrewer)
library(lme4)
library(lmerTest)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(Rmisc)
library(glmulti)
library(rJava)
library(MuMIn)
library(ggh4x)
nb.cols <- 70
self.cols <- colorRampPalette(brewer.pal(9, "Reds"))(nb.cols)
nature.cols <- colorRampPalette(brewer.pal(9, "Greens"))(nb.cols)
perception.cols <- colorRampPalette(brewer.pal(9, "Blues"))(nb.cols)
col2 <- colorRampPalette(c("#053061", "#2166AC", "#4393C3", "#92C5DE",
"#D1E5F0", "#FFFFFF", "#FDDBC7", "#F4A582",
"#D6604D", "#B2182B","#67001F" ))
#palette=c("Fast" ="#1e9a33","Light"="#2fd64b","Heavy"="#6fe382","Saturated"="#331e9a","Unsaturated"="#4b2fd6","Ripple"="#826fe3","Grow"="#9a331e","Shrink"="#d64b2f","Delay"="#e3826f")
unreal = read.csv('unreal_11.5.23.csv', header=TRUE, stringsAsFactors = TRUE)
rsl = read.csv('rsl_11.5.23.csv', header=TRUE, stringsAsFactors = TRUE)
#missing sub 518
demographics <- read.csv("data_frame_unreal_for_correlation_25.4.23.csv",header=TRUE, stringsAsFactors = TRUE)
wl<-read.csv("wl_11.5.23.csv", header=TRUE, stringsAsFactors = TRUE)
unreal_wl<- read.csv("unreal_wl_11.5.23.csv", header=TRUE, stringsAsFactors = TRUE)
unique(unreal$Subject)
length(unique(unreal$Subject))
wl$Subject<-as.factor(as.character(wl$Subject))
unreal_wl$Subject<-as.factor(as.character(unreal_wl$Subject))
unreal$Subject<-as.factor(as.character(unreal$Subject))
rsl$Subject<-as.factor(as.character(rsl$Subject))
unreal$Domain<-factor(unreal$Domain,levels=c("Perception","Self","Nature"))
unreal$b_domain<-factor(unreal$b_domain,levels=c("Baseline","Perception","Self","Nature"))
unreal$original_condition_names<-factor(unreal$original_condition_names,levels=c("Shrink","Grow","Delay","Heavy","Light","Fast","Unsaturated","Saturated","Ripple"))
rsl$Domain<-factor(rsl$Domain,levels=c("Perception","Self","Nature"))
rsl$b_domain<-factor(rsl$b_domain,levels=c("Baseline","Perception","Self","Nature"))
rsl$original_condition_names<-factor(rsl$original_condition_names,levels=c("Shrink","Grow","Delay","Heavy","Light","Fast","Unsaturated","Saturated","Ripple"))
rsl$Study<-as.character(rsl$Study)
rsl[rsl$Study=="Combined",]$Study<-"All"
rsl$Study<-as.factor(rsl$Study)
unreal_wl$Domain<-factor(unreal_wl$Domain,levels=c("Perception","Self","Nature"))
unreal_wl$b_domain<-factor(unreal_wl$b_domain,levels=c("Baseline","Perception","Self","Nature"))
unreal_wl$original_condition_names<-factor(unreal_wl$original_condition_names,levels=c("Delay","Light","Ripple"))
unreal_wl$Study<-as.character(unreal_wl$Study)
unreal_wl[unreal_wl$Study=="Combined",]$Study<-"Adult"
unreal_wl[unreal_wl$Study=="Developmental",]$Study<-"Youth"
unreal_wl$Study<-as.factor(unreal_wl$Study)
unreal_wl$Study<-factor(unreal_wl$Study,levels=c("Youth","Adult"))
#fix from niva's org file
# unreal_wl[unreal_wl$Level==0 & unreal_wl$ConditionName=="Light",]$StimVal<--9.81
wl$Domain<-factor(wl$Domain,levels=c("Perception","Self","Nature"))
wl$b_domain<-factor(wl$b_domain,levels=c("Baseline","Perception","Self","Nature"))
wl$original_condition_names<-factor(wl$original_condition_names,levels=c("Delay","Light","Ripple"))
#fix from niva's org file
# wl[wl$Level==0 & wl$ConditionName=="Light",]$StimVal<--9.81
replication<-rsl[rsl$Study=="Replication",]
exploration<-rsl[rsl$Study=="Exploration",]
all_subs<-rsl[rsl$Study=="All",]
#exploration
exploration[exploration$ConditionName=="Delay",exploration$StimVal>0.2535]
#exploration
exploration[exploration$ConditionName=="Delay"& exploration$StimVal>0.2535,]
replication[replication$ConditionName=="Delay"& replication$StimVal>0.2535,]
high_delays<-replication[replication$ConditionName=="Delay"& replication$StimVal>0.2535,]
View(high_delays)
#checking just subjects 523 and 537
523<-replication[replication$Subject=="523",]
View(replication)
#checking just subjects 523 and 537
sub_523<-replication[replication$Subject=="523",]
View(sub_523)
#shrink max exploration
max(exploration[exploration$ConditionName=="Shrink",exploration$StimVal])
#shrink max exploration
min(exploration[exploration$ConditionName=="Shrink",exploration$StimVal])
#shrink max exploration
exploration[exploration$ConditionName=="Shrink",exploration$StimVal]
#shrink max exploration
exploration[exploration$ConditionName=="Shrink",]
#shrink max exploration
exploration[exploration$ConditionName=="Shrink",]$StimVal
#shrink max exploration
min(exploration[exploration$ConditionName=="Shrink",]$StimVal)
min(replication[replication$ConditionName=="Shrink",]$StimVal)
replication[replication$ConditionName=="Shrink",]$StimVal
replication[replication$ConditionName=="Shrink",]$StimVal<-0.1543
replication<-rsl[rsl$Study=="Replication",]
replication[replication$ConditionName=="Shrink",]$StimVal<(-0.1543)
replication[replication$ConditionName=="Shrink"&replication$StimVal<(-0.1543),]
#summarize a df with mean stim values per condition\level\subject
stim_means<-ddply(unreal, .(Subject,Level,ConditionName),summarise,mean_stim=mean(StimVal))
View(stim_means)
#ignore baseline stimvalues
stim_alt_levels<-stim_means[stim_means$Level!=0,]
View(stim_alt_levels)
#make sure all stim values are positive
stim_abs<-abs(stim_alt_levels)
#make sure all stim values are positive
stim_alt_levels$mean_stim<-abs(stim_alt_levels$mean_stim)
sort(stim_alt_levels$ConditionName)
sort(stim_alt_levels,decreasing = stim_alt_levels$ConditionName)
with(stim_alt_levels,stim_alt_levels[order(ConditionName),])
with(stim_alt_levels,stim_alt_levels[order(Subject,ConditionName,Level),])
#make sure the order of the df is by conditionname so that we can check each 4 rows
stim_sorted<-with(stim_alt_levels,stim_alt_levels[order(Subject,ConditionName,Level),])
View(stim_sorted)
#for evry 4 rows check if they are ascending
stim_sorted[1:4,'mean_stim']
#for evry 4 rows check if they are ascending
!is.unsorted(stim_sorted[1:4,'mean_stim'])
length(stim_sorted)/4
length(stim_sorted$mean_stim)/4)
length(stim_sorted$mean_stim)/4
rep(1:length(stim_sorted$mean_stim)/4
)
2268/4
seq(from=1,to=2268,by=4)
stim_sorted[80,'Subject']
cat(stim_sorted[80,'Subject'])
print(stim_sorted[80,'Subject'])
print(stim_sorted[80,'Subject'])[1]
#for evry 4 rows check if they are sorted
for (i in seq(from=1,to=2268,by=4)){
print(stim_sorted[i,'Subject'])
print(stim_sorted[i,'ConditionName'])}
!is.unsorted(stim_sorted[1:1+3,'mean_stim'])
is.unsorted(stim_sorted[1:1+3,'mean_stim'])
is.unsorted(stim_sorted[5:5+3,'mean_stim'])
is.unsorted(stim_sorted[2248:2248+3,'mean_stim'])
stim_sorted[2248:2251,]
stim_sorted[2249:2250,]
stim_sorted[2249:2252,]
!is.sorted(stim_sorted[2249:2252,])
!is.unsorted(stim_sorted[2249:2252,])
!is.unsorted(stim_sorted[2249:2252,'mean_stim'])
is.unsorted(stim_sorted[2249:2252,'mean_stim'])
seq(from=1,to=2268,by=4)
!is.unsorted(stim_sorted[1:1+3,'mean_stim'])
stim_light<-stim_sorted[stim_sorted$ConditionName=="Light",]
stim_sorted<-stim_sorted[stim_sorted$ConditionName!="Light",]
for (i in seq(from=1,to=2268,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:i+3,'mean_stim']){
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2268,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:i+3,'mean_stim']){
?if()
?if
{}
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2268,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:i+3,'mean_stim']){
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2268,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:i+3,'mean_stim'])){
print(stim_sorted[i,'Subject'], max.levels = 0)
print(stim_sorted[i,'ConditionName'], max.levels = 0)
}
}
for (i in seq(from=1,to=252,by=4)){
{
if(!is.unsorted(stim_light[i:i+3,'mean_stim'])){
print(stim_light[i,'Subject'])
print(stim_light[i:i+3,])}
for (i in seq(from=1,to=252,by=4)){
if(!is.unsorted(stim_light[i:i+3,'mean_stim'])){
print(stim_light[i,'Subject'])
print(stim_light[i:i+3,])}
}
for (i in seq(from=1,to=252,by=4)){
if(!is.unsorted(stim_light[i:i+3,'mean_stim'])){
print(stim_light[i,'Subject'])
print(stim_light[i:i+3,])}
}
for (i in seq(from=1,to=252,by=4)){
if(is.unsorted(stim_light[i:i+3,'mean_stim'])){
print(stim_light[i,'Subject'])
print(stim_light[i:i+3,])}
}
for (i in seq(from=1,to=252,by=4)){
if(is.unsorted(stim_light[i:i+3,'mean_stim'])){
print(stim_light[i,'Subject'])
print(stim_light[i:i+3,])}
}
View(stim_light)
View(stim_light)
asdg
qw
[reogk]
for (i in seq(from=1,to=252,by=4)){
if(is.unsorted(stim_light[i:i+3,'mean_stim'])){
print(stim_light[i,'Subject'])
print(stim_light[i:i+3,])}
}
for (i in seq(from=1,to=252,by=4)){
if(!is.unsorted(stim_light[i:i+3,'mean_stim'])){
print(stim_light[i,'Subject'])
print(stim_light[i:i+3,])}
}
for (i in seq(from=1,to=252,by=4)){
if(!is.unsorted(stim_light[i:i+3,'mean_stim'])){
print(stim_light[i,'Subject'], max.levels = 0)
print(stim_light[i:i+3,])}
}
View(stim_light)
!is.unsorted(stim_light[1:1+3,'mean_stim'])
stim_sorted<-with(stim_alt_levels,stim_alt_levels[order(Subject,ConditionName,Level),])
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2268,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:i+3,'mean_stim'])){
print(stim_sorted[i,'Subject'], max.levels = 0)
print(stim_sorted[i,'ConditionName'], max.levels = 0)
}
}
#add fake data with bad values to data frame
stim_sorted[2269:2272,]<-stim_sorted[2265:2268,]
stim_sorted[2269,'mean_stim']<-4
stim_sorted[2269:2272,'mean_stim']<-c(4,-10,23,1)
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2268,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:i+3,'mean_stim'])){
print(stim_sorted[i,'Subject'], max.levels = 0)
print(stim_sorted[i,'ConditionName'], max.levels = 0)
}
}
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2272,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:i+3,'mean_stim'])){
print(stim_sorted[i,'Subject'], max.levels = 0)
print(stim_sorted[i,'ConditionName'], max.levels = 0)
}
}
is.unsorted(stim_sorted[2269:2269+3,'mean_stim'])
is.unsorted(stim_sorted[2269.1:2269.1+3,'mean_stim'])
stim_sorted[2269:2272,'mean_stim']
is.unsorted(stim_sorted[2269:2272,'mean_stim'])
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2272,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:(i+3),'mean_stim'])){
print(stim_sorted[i,'Subject'], max.levels = 0)
print(stim_sorted[i,'ConditionName'], max.levels = 0)
}
}
#drop "light" condition we will check it separately
stim_light<-stim_sorted[stim_sorted$ConditionName=="Light",]
stim_sorted<-stim_sorted[stim_sorted$ConditionName!="Light",]
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2272,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:(i+3),'mean_stim'])){
print(stim_sorted[i,'Subject'], max.levels = 0)
print(stim_sorted[i,'ConditionName'], max.levels = 0)
}
}
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2272,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:(i+3),'mean_stim'])){
print(stim_sorted[i,'Subject'], max.levels = 0)
print(stim_sorted[i,'ConditionName'], max.levels = 0)
}
}
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2020,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:(i+3),'mean_stim'])){
print(stim_sorted[i,'Subject'], max.levels = 0)
print(stim_sorted[i,'ConditionName'], max.levels = 0)
}
}
#add fake data with bad values to light data frame
stim_light[252:255,]<-stim_light[249:252,]
stim_light[252:255,'mean_stim']<-c(4,-10,23,1)
for (i in seq(from=1,to=255,by=4)){
if(!is.unsorted(stim_light[i:(i+3),'mean_stim'])){
print(stim_light[i,'Subject'], max.levels = 0)
print(stim_light[i:(i+3),])}
}
stim_sorted<-with(stim_alt_levels,stim_alt_levels[order(Subject,ConditionName,Level),])
#drop "light" condition we will check it separately
stim_light<-stim_sorted[stim_sorted$ConditionName=="Light",]
stim_sorted<-stim_sorted[stim_sorted$ConditionName!="Light",]
stim_sorted[2269:2272,]<-stim_sorted[2265:2268,]
stim_sorted[2269:2272,'mean_stim']<-c(4,-10,23,1)
#add fake data with bad values to light data frame
stim_light[253:256,]<-stim_light[249:252,]
stim_light[253:256,'mean_stim']<-c(4,-10,23,1)
for (i in seq(from=1,to=256,by=4)){
if(!is.unsorted(stim_light[i:(i+3),'mean_stim'])){
print(stim_light[i,'Subject'], max.levels = 0)
print(stim_light[i:(i+3),])}
}
!is.unsorted(stim_light[253:(253+3),'mean_stim'])
for (i in seq(from=1,to=256,by=4)){
if(is.unsorted(stim_light[i:(i+3),'mean_stim'])){
print(stim_light[i,'Subject'], max.levels = 0)
print(stim_light[i:(i+3),])}
}
#make sure the order of the df is by conditionname so that we can check each 4 rows
stim_sorted<-with(stim_alt_levels,stim_alt_levels[order(Subject,ConditionName,Level),])
#add fake data with bad values to data frame
stim_sorted[2269:2272,]<-stim_sorted[2265:2268,]
stim_sorted[2269:2272,'mean_stim']<-c(4,-10,23,1)
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2020,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:(i+3),'mean_stim'],strictly = FALSE)){
print(stim_sorted[i,'Subject'], max.levels = 0)
print(stim_sorted[i,'ConditionName'], max.levels = 0)
}
}
stim_light<-stim_sorted[stim_sorted$ConditionName=="Light",]
stim_sorted<-stim_sorted[stim_sorted$ConditionName!="Light",]
stim_light[253:256,]<-stim_light[249:252,]
stim_light[253:256,'mean_stim']<-c(4,-10,23,1)
for (i in seq(from=1,to=256,by=4)){
if(is.unsorted(stim_light[i:(i+3),'mean_stim'])){
print(stim_light[i,'Subject'], max.levels = 0)
print(stim_light[i:(i+3),])}
}
#make sure the order of the df is by conditionname so that we can check each 4 rows
stim_sorted<-with(stim_alt_levels,stim_alt_levels[order(Subject,ConditionName,Level),])
stim_sorted<-stim_sorted[stim_sorted$ConditionName=="Light",'mean_stim'*(-1)]
stim_sorted[stim_sorted$ConditionName=="Light",'mean_stim']<-stim_sorted[stim_sorted$ConditionName=="Light",'mean_stim']*(-1)
#add fake data with bad values to data frame
stim_sorted[2269:2272,]<-stim_sorted[2265:2268,]
stim_sorted[2269:2272,'mean_stim']<-c(4,-10,23,1)
#for every 4 rows check if they are unsorted
for (i in seq(from=1,to=2272,by=4)){
#if they are unsorted let me know
if(is.unsorted(stim_sorted[i:(i+3),'mean_stim'],strictly = FALSE)){
print(stim_sorted[i,'Subject'], max.levels = 0)
print(stim_sorted[i,'ConditionName'], max.levels = 0)
}
}
