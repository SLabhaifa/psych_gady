#name rows by condition
rownames(table_summary)<-ConditionName_vec
####################################################
#table_summary<-round(as.numeric(table_summary),digits=3)
#looking at within trial data
#how many vases did the subject hit in each run and each condition?
vase_data<-data
#name columns
colnames(vase_data)[1]<-"dont use"
colnames(vase_data)[2]<-"ConditionCode"
#filter-out trials with codes 1 or 99 from the df
target_a<-c("1","99")
target_b<-c("1","0")
target_c<-c("Throw away")
vase_data_b<-filter(vase_data,!ConditionCode %in% target_a,)
vase_data_b<-filter(vase_data_b,!QuestionResult %in% target_b)
vase_data_b<-vase_data_b %>% mutate(ConditionName = ConditionCode)
#adding effect names column to data
vase_data_b<-name_conditions(vase_data_b)
vase_data_b<-filter(vase_data_b, !ConditionName %in% target_c)
#create a column of run numbers
vase_data_b<-vase_data_b %>% group_by(ConditionName) %>% mutate(Run = dense_rank(BlockNumber))
qagg<-vase_data_b %>% group_by(Run,ConditionName,QuestionResult) %>% tally()
filter_hits <-qagg$QuestionResult=="MarkedTargetHit"
qagg_b<-qagg[filter_hits,]
qagg_c<-subset(qagg_b,select=-c(QuestionResult))
qagg_c<-qagg_c[order(qagg_c$ConditionName),]
names(qagg_c)<-c("Run","ConditionName","Count")
#divide number of hits with max number of steps*2 in each run
num_of_vases<-step_count[order(step_count$ConditionName),]$Steps*2
target_hits<-qagg_c$Count/num_of_vases
qagg_c$Count<-target_hits
names(qagg_c)<-c("Run","ConditionName","%_Hits")
vase_hits<-qagg_c %>% pull("%_Hits")
#vase_hit_length<-length(vase_hits)
#place them in table by block or run
dhits<-qagg_c$`%_Hits`[seq(1,length(qagg_c),2)]
ahits<-qagg_c$`%_Hits`[seq(2,length(qagg_c)+1,2)]
table_summary<-table_summary %>% mutate(hits1 = dhits)
table_summary<-table_summary %>% mutate(hits2 = ahits)
#name rows by condition
#rownames(table_summary)<-ConditionName_vec
#what was the response time for answering the question?
#filtering
filter_qrt <-vase_data$ResponseTime>0
qrt<-vase_data[filter_qrt,]
filter_qid <-qrt$QuestionID==88
qrt<-qrt[filter_qid,]
#naming
qrt<-qrt %>% mutate(ConditionName = ConditionCode)
#adding effect names column
qrt<-name_conditions(qrt)
qrt<-filter(qrt, !ConditionName %in% target_c)
#create a column of run numbers
qrt<-qrt %>% group_by(ConditionName) %>% mutate(Run = dense_rank(BlockNumber))
#summarize question reaction times
Q_rt<-summaryBy(ResponseTime ~ ConditionName+Run, data=qrt, FUN=function(x) {m=mean(x)},keep.names=TRUE)
Q_RT <- Q_rt %>% pull("ResponseTime")
#Q_RT_length<-length(Q_RT)
#place them in sequences
d_rt<-Q_rt$ResponseTime[seq(1,length(Q_RT),2)]
a_rt<-Q_rt$ResponseTime[seq(2,length(Q_RT)+1,2)]
table_summary<-table_summary %>% mutate(rt1 = d_rt)
table_summary<-table_summary %>% mutate(rt2 = a_rt)
#how many neg pos answers??
positive_ans<-summaryBy(PositiveAnswersCount ~ Run+ConditionName, data=data_cs, FUN=function(x) {max=max(x,na.rm = TRUE)},keep.names=TRUE)
negative_ans<-summaryBy(NegativeAnswersCount ~ Run+ConditionName, data=data_cs, FUN=function(x) {max=max(x,na.rm = TRUE)},keep.names=TRUE)
pos_a<-positive_ans %>% pull("PositiveAnswersCount")
neg_a<-negative_ans %>% pull("NegativeAnswersCount")
pos_a_length<-length(pos_a)
neg_a_length<-length(neg_a)
table_summary<-table_summary %>% mutate(pos1 = pos_a[1:(pos_a_length/2)])
table_summary<-table_summary %>% mutate(pos2 = pos_a[((pos_a_length/2)+1):(pos_a_length)])
table_summary<-table_summary %>% mutate(neg1 = neg_a[1:(neg_a_length/2)])
table_summary<-table_summary %>% mutate(neg2 = neg_a[((neg_a_length/2)+1):(neg_a_length)])
rownames(table_summary)<-ConditionName_vec
table_summary<-table_summary %>% mutate(ConditionName = ConditionName_vec)
#what was the range of practical values (i.e. where did they start and stop seeing the condition, and within this range where does the variability reside?)
data_cs<-data_cs %>% mutate(Detect = abs(StairCaseValue*as.numeric(as.character(QuestionResult))))
data_cs$Detect[data_cs$Detect==0]<-NA
#here is a problem, we are not treating the blocks seperately
value_range<-summaryBy(Detect ~ BlockNumber+ConditionName, data=data_cs, FUN=function(x) {c (max=max(x,na.rm=TRUE),min=min(x,na.rm=TRUE))},keep.names=TRUE)
#we have to order the rows alphabetically so they fit in the right place in table_summary
value_range<-value_range[order(value_range$ConditionName),]
val_rang1<- value_range %>% pull(Detect.max)
val_rang2<- value_range %>% pull(Detect.min)
#pick first run and then 2nd run
dtop<-val_rang1[seq(1,length(val_rang1),2)]
atop<-val_rang1[seq(2,length(val_rang1),2)]
dlow<-val_rang2[seq(1,length(val_rang2),2)]
alow<-val_rang2[seq(2,length(val_rang2),2)]
table_summary<-table_summary %>% mutate(Dtop_range = dtop)
table_summary<-table_summary %>% mutate(Atop_range = atop)
table_summary<-table_summary %>% mutate(Dlow_range = dlow)
table_summary<-table_summary %>% mutate(Alow_range = alow)
data_cs<-data_cs %>% mutate(unDetect = as.numeric(as.character(QuestionResult)))
data_cs$unDetect[data_cs$unDetect==1]<-NA
data_cs$unDetect[data_cs$unDetect==0]<-1
data_cs$unDetect<-data_cs$unDetect*data_cs$StairCaseValue
undetected_range<-summaryBy(unDetect ~ BlockNumber+ConditionName, data=data_cs, FUN=function(x) {c(max=max(x,na.rm=TRUE),min=min(x,na.rm=TRUE))},keep.names=TRUE)
un_rang1<- undetected_range %>% pull(unDetect.max)
un_rang2<- undetected_range %>% pull(unDetect.min)
#pick first run then 2nd run
dtop_un<-un_rang1[seq(1,length(un_rang1),2)]
atop_un<-un_rang1[seq(2,length(un_rang1),2)]
dlow_un<-un_rang2[seq(1,length(un_rang2),2)]
alow_un<-un_rang2[seq(2,length(un_rang2),2)]
table_summary<-table_summary %>% mutate(Dt_und = dtop_un)
table_summary<-table_summary %>% mutate(At_und = atop_un)
table_summary<-table_summary %>% mutate(Dl_und = dlow_un)
table_summary<-table_summary %>% mutate(Al_und = alow_un)
#general stuff:
no_ans_in_time<-summary(data$QuestionResult)[4]#getting the 4th column of this summary
blocks<-length(unique(data_cs$BlockNumber))#getting number of blocks we ran
vase_score<-summary(data$QuestionResult)[3]/sum(num_of_vases)#getting the percent of correct target hits
names(vase_score)<-c("Vase Score")
vase_score<-round(vase_score,2)
#wrong answers
#make sure all are numeric values
#table_summary<-as.numeric(as.character(table_summary))
#round numbers - Idk why but I had to round these columns one at a time, stupid R/stupid Gadi
table_summary$hits1<-round(table_summary$hits1,digits=3)
table_summary$hits2<-round(table_summary$hits2,digits=3)
table_summary$rt1<-round(table_summary$rt1,digits=3)
table_summary$rt2<-round(table_summary$rt2,digits=3)
#adding fitted threshold values and R^2
#table_summary<-table_summary %>% mutate(ConditionName = ConditionName_vec)
#ask for JND thresholds csv
print("Choose the subjects' JND thresholds.csv file")
filename2<-file.choose(new=FALSE);
#read JND output csv filename
th_csv<-read.csv(filename2);
#create level columns before looping
table_summary<-table_summary %>% mutate(L1 = ConditionName)
table_summary<-table_summary %>% mutate(L2 = ConditionName)
table_summary<-table_summary %>% mutate(L3 = ConditionName)
table_summary<-table_summary %>% mutate(L4 = ConditionName)
table_summary<-table_summary %>% mutate(pseudo_R_sqr = ConditionName)
for (i in 1:length(ConditionName_vec)){
x<-ConditionName_vec[i]
levels<-th_csv$stim_val[th_csv$Condition==x]
t_levels<-transpose(as.list(levels))
table_summary[table_summary$ConditionName==x,c("L1","L2","L3","L4")]<-round(unlist(t_levels),4)
table_summary[table_summary$ConditionName==x,"pseudo_R_sqr"]<-round(max(th_csv$pr2[th_csv$Condition==x]),2)
}
rownames(table_summary)<-ConditionName_vec
#name columns
#colnames(table_summary)
column_names<-c("Average Reversal Value 1","Average Reversal Value  2","Average Reversal","Number of Reversals 1","Number of Reversals 2","Number of Steps 1","Number of Steps 2","Average Number of Steps","% Vase Hits 1","% Vase Hits 2","Question RT 1","Question RT 2","Positive Ans 1","Positive Ans 2","Negative Ans 1","Negative Ans 2","High Range 1","High Range 2","Low Range 1","Low Range 2","High Miss 1","High Miss 2","Low Miss 1","Low Miss 2","ConditionName","%20 Detection","%50 Detection","%75 Detection","%95 Detection","Pseudo R Squared")
colnames(table_summary)<-column_names
#name rows by condition
rownames(table_summary)<-ConditionName_vec
#name columns
#colnames(table_summary)
column_names<-c("Average Reversal Value 1","Average Reversal Value  2","Average Reversal","Number of Reversals 1","Number of Reversals 2","Number of Steps 1","Number of Steps 2","Average Number of Steps","% Vase Hits 1","% Vase Hits 2","Question RT 1","Question RT 2","Positive Ans 1","Positive Ans 2","Negative Ans 1","Negative Ans 2","ConditionName","High Range 1","High Range 2","Low Range 1","Low Range 2","High Miss 1","High Miss 2","Low Miss 1","Low Miss 2","%20 Detection","%50 Detection","%75 Detection","%95 Detection","Pseudo R Squared")
colnames(table_summary)<-column_names
col_order <- c("ConditionName","Average Reversal Value 1","Average Reversal Value  2","Average Reversal","Number of Reversals 1","Number of Reversals 2","Number of Steps 1","Number of Steps 2","Average Number of Steps","% Vase Hits 1","% Vase Hits 2","Question RT 1","Question RT 2","Positive Ans 1","Negative Ans 1","Positive Ans 2","Negative Ans 2","High Range 1","High Range 2","Low Range 1","Low Range 2","High Miss 1","High Miss 2","Low Miss 1","Low Miss 2","%20 Detection","%50 Detection","%75 Detection","%95 Detection","Pseudo R Squared")
table_summary <- table_summary[, col_order]
create input in template form
#create input in template form
setwd("C:\\Users\\User\\Desktop\\Unreal_Scripts")
#sub<-readr::parse_number(basename(unreal_rand_temp))
filename<-gsub(" ","",paste("jnd_summary",as.character(sub_n),".csv"))
fwrite(table_summary,filename,col.names=TRUE,row.names = TRUE)
#fwrite(data_cs,'pGD_2sc.csv',col.names=TRUE)
print("I am complete")
setwd("C:\\Users\\User\\Desktop\\Unreal_Scripts\\jnd_validate")
#sub<-readr::parse_number(basename(unreal_rand_temp))
filename<-gsub(" ","",paste("jnd_summary",as.character(sub_n),".csv"))
fwrite(table_summary,filename,col.names=TRUE,row.names = TRUE)
#fwrite(data_cs,'pGD_2sc.csv',col.names=TRUE)
print("I am complete")
#sub<-readr::parse_number(basename(unreal_rand_temp))
filename<-gsub(" ","",paste("jnd_summary_subject_",as.character(sub_n),".csv"))
fwrite(table_summary,filename,col.names=TRUE,row.names = TRUE)
#fwrite(data_cs,'pGD_2sc.csv',col.names=TRUE)
print("I am complete")
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/run_unreal_psy.R', echo=TRUE)
#Parameters
library(stringi)
#working directory
setwd('C:\\Users\\User\\Desktop\\unreal_psychophysics\\rdas')
sub_num<-readline(prompt = "Subject number:")
subject_folder<-paste("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_",sub_num)
load("run_unreal_psy.rda")
run_unreal_psy(subject_folder,attempt)
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/run_unreal_psy.R', echo=TRUE)
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",18)
C:\Users\User\Desktop\unreal_psychophysics\rdas
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/run_unreal_psy.R', echo=TRUE)
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",18)
source('C:/Users/User/Desktop/unreal_psychophysics/R functions/psy_paths.R', echo=TRUE)
save(psy_paths, file='C:\\Users\\User\\Desktop\\unreal_psychophysics\\rdas\\psy_paths.rda')
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",18)
run_unreal_psy("C:\\Users\\User\\Desktop\\unreal_psychophysics\\unreal_04\\sub_014",19)
source("C:/Users/user/Desktop/unreal_psychophysics/load_function_unreal.R")
source("C:/Users/user/Desktop/unreal_psychophysics/load_function_unreal.R")
source("C:/Users/user/Desktop/unreal_psychophysics/load_function_unreal.R")
here()
library(here)
library(rio)
load("repeat_jnd.rda")
load(here("rdas","repeat_jnd.rda"))
load(here("rdas","run_unreal_psy.rda"))
load(here("rdas","load_thresholds.rda"))
load(here("rdas","name_conditions_and_domains.rda"))
load(here("rdas","psy_paths.rda"))
load(here("rdas","repeat_list.rda"))
load(here("rdas","threshold_fix.rda"))
load(here("rdas","unreal_psy.rda"))
load(here("rdas","remove_staircase.rda"))
load(here("rdas","concat_csvs.rda"))
run_unreal_psy()
renv::snapshot()
here()
source("preprocessing.R")
here()
list.files(here())
source("preprocessing.R")
source("preprocessing.R")
here()
source(here("preprocessing.R"))
study=readline("Study folder name:")
sub_n = readline("Subject number:")
attempt= readline(prompt = "Fitting attempt number:")
subject_folder<-here("Studies",study,sub_folder_name)
sub_folder_name<-gsub(" ","",paste("sub_",sub_n))
subject_folder<-here("Studies",study,sub_folder_name)
results_folder_name<-gsub(" ","",paste("results_sub_",sub_n,'_attempt_',as.character(attempt)))
results_folder<-here(study,sub_folder_name,results_folder_name)
input_folder_name<- gsub(" ","",paste("unreal_input_sub_",sub_n,'_attempt_',as.character(attempt)))
unreal_input_folder<- gsub(" ","",paste(results_folder,input_folder_name))
#list of folder names
folder_names<-list(sub_folder_name,results_folder_name,input_folder_name)
#create subject results folder
here(study,sub_folder_name,try(dir.create(results_folder),silent=TRUE))
results_folder<-here("Studies",study,sub_folder_name,results_folder_name)
input_folder_name<- gsub(" ","",paste("unreal_input_sub_",sub_n,'_attempt_',as.character(attempt)))
unreal_input_folder<- gsub(" ","",paste(results_folder,input_folder_name))
unreal_input_folder
results_folder
input_folder_name
unreal_input_folder<- gsub(" ","",paste(results_folder,"/",input_folder_name))
unreal_input_folder
#list of folder names
folder_names<-list(sub_folder_name,results_folder_name,input_folder_name)
#create subject results folder
here(study,sub_folder_name,try(dir.create(results_folder),silent=TRUE))
#create subject input folder for next experiment
here(study,sub_folder_name,results_folder,try(dir.create(unreal_input_folder),silent=TRUE))
preprocessing()
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
study=readline("Study folder name:")
sub_n = readline("Subject number:")
attempt= readline(prompt = "Fitting attempt number:")
sub_folder_name<-gsub(" ","",paste("sub_",sub_n))
subject_folder<-here("Studies",study,sub_folder_name)
results_folder_name<-gsub(" ","",paste("results_sub_",sub_n,'_attempt_',as.character(attempt)))
results_folder<-here("Studies",study,sub_folder_name,results_folder_name)
input_folder_name<- gsub(" ","",paste("unreal_input_sub_",sub_n,'_attempt_',as.character(attempt)))
unreal_input_folder<- gsub(" ","",paste(results_folder,"/",input_folder_name))
#list of folder names
folder_names<-list(sub_folder_name,results_folder_name,input_folder_name)
#create subject results folder
here(study,sub_folder_name,try(dir.create(results_folder),silent=TRUE))
#create subject input folder for next experiment
here(study,sub_folder_name,results_folder,try(dir.create(unreal_input_folder),silent=TRUE))
preprocessing()
cat("Matlab is fitting the data","\n")
run_matlab_script("unreal_fit.m",display=FALSE,verbose=FALSE)
here()
list.files(here())
cat("Matlab is fitting the data","\n")
run_matlab_script("unreal_fit.m",display=FALSE,verbose=FALSE)
?run_matlab_script()
run_matlab_script(here("unreal_fit.m"),display=FALSE,verbose=FALSE)
source(here("repeat_jnd.R"))
here()
list.files(here())
source(here("repeat_jnd.R"))
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
source(here("repeat_list.R"))
source(here("plot_staircase_unity.R"))
source(here("plot_staircase_unity.R"))
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
source(here("post_fit_adjustments.R"))
source(here("post_fit_adjustments.R"))
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
source(here("post_fit_adjustments.R"))
source(here("fix_thresholds.R"))
source(here("thresholds_fix.R"))
source(here("threshold_fix.R"))
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
source(here("post_fit_adjustments.R"))
source(here("threshold_fix.R"))
source(here("shift_conditions.R"))
source(here("plot_staircase.R"))
source(here("plot_staircase.R"))
source(here("plot_staircase.R"))
here()
list.files(here())
source("plot_staircase.R")
source(here("plot_staircase.R"))
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
source(here("post_fit_adjustments.R"))
source(here("threshold_fix.R"))
source(here("shift_conditions.R"))
source(here("plot_staircase.R"))
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
source(here("post_fit_adjustments.R"))
source(here("threshold_fix.R"))
source(here("shift_conditions.R"))
source(here("plot_staircase.R"))
file.exists('C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/plot_staircase.R')
file.exists('C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/plot_staircase_unity.R')
source(here("plot_staircase_unity.R"))
source(here("plot_staircase.R"))
source(here("plot_staircase.R"))
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/plot_straircase.R", echo=TRUE)
source(here("plot_staircase.R"))
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
source(here("post_fit_adjustments.R"))
source(here("threshold_fix.R"))
source(here("shift_conditions.R"))
source(here("plot_staircase.R"))
source(here("plot_staircase_unity.R"))
source(here("repeat_jnd.R"))
source(here("repeat_jnd.R"))
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
file.exists('C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R')
source(here("repeat_jnd.R"))
study=readline("Study folder name:")
sub_n<- readline(prompt = "Subject number:");
attempt<- readline(prompt = "Staircase attempt number:");
sub_folder_name<-paste0("sub_",sub_n)
#setwd("C:\\Users\\User\\OneDrive\\Desktop\\unreal_psychophysics\\rdas")
load(here("rdas","psy_paths.rda"))
load(here("rdas","run_unreal_psy.rda"))
repeat_number<-as.numeric(attempt)-1;
#load the answers csv of the repeated staircases
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
here("Studies",study,sub_folder_name)
#load the answers csv of the repeated staircases
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
unlink(here("Studies",study,sub_folder_name,repeat_file))
#load the previous attempt csv (there should be only one attempt file in the folder)
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_data<-import(here("Studies",study,sub_folder_name,previous_attempt_file))
unlink(here("Studies",study,sub_folder_name,previous_attempt_file))
#make a unique vector of the condition codes used in the repeat TrialNumber column
repeat_codes<-unique(repeat_data$TrialNumber)
#turn all codes into the 3 first digits
repeat_codes<-as.numeric(substr(repeat_codes,1,3))
#make a new column of codes with only 3 digits or less
previous_attempt_data<-previous_attempt_data %>% mutate(short_code = TrialNumber)
previous_attempt_data$short_code<-as.numeric(substr(previous_attempt_data$short_code,1,3))
#remove rows with these codes from previous attempt data
cleaned_previous_data<-previous_attempt_data  %>% filter(!short_code %in% repeat_codes)
#remove short_code column
cleaned_previous_data<-subset(cleaned_previous_data, select = -c(short_code))
#fix block number or step number for new conditions
last_block<-max(previous_attempt_data$BlockNumber)
#add block number to the block numbers in the repeat data
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]<-repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
#add the number of times this condition has been run
repeat_data<- repeat_data %>% mutate(Attempt = as.numeric(attempt))
#rbind repeat to cleaned attempt df
previous_attempt_plus_repeat<-rbind(cleaned_previous_data,repeat_data)
previous_attempt_file<-stri_sub(previous_attempt_file,1,-5)
#save the new data frame as an 'Answers' file
filename<-gsub(" ","",paste(previous_attempt_file,"_",as.character(attempt),"_.csv"))
export(previous_attempt_plus_repeat,here("Studies",study,sub_folder_name,filename),col.names=TRUE)
source(here("preprocessing.R"))
source(here("name_conditions_and_domains.R"))
source(here("post_fit_adjustments.R"))
source(here("threshold_fix.R"))
source(here("shift_conditions.R"))
source(here("plot_staircase.R"))
source(here("plot_staircase_unity.R"))
source(here("repeat_jnd.R"))
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
study=readline("Study folder name:")
sub_n<- readline(prompt = "Subject number:");
attempt<- readline(prompt = "Staircase attempt number:");
sub_folder_name<-paste0("sub_",sub_n)
repeat_number<-as.numeric(attempt)-1;
#load the answers csv of the repeated staircases
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
unlink(here("Studies",study,sub_folder_name,repeat_file))
#load the previous attempt csv (there should be only one attempt file in the folder)
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_data<-import(here("Studies",study,sub_folder_name,previous_attempt_file))
unlink(here("Studies",study,sub_folder_name,previous_attempt_file))
#make a unique vector of the condition codes used in the repeat TrialNumber column
repeat_codes<-unique(repeat_data$TrialNumber)
#turn all codes into the 3 first digits
repeat_codes<-as.numeric(substr(repeat_codes,1,3))
#make a new column of codes with only 3 digits or less
previous_attempt_data<-previous_attempt_data %>% mutate(short_code = TrialNumber)
previous_attempt_data$short_code<-as.numeric(substr(previous_attempt_data$short_code,1,3))
#remove rows with these codes from previous attempt data
cleaned_previous_data<-previous_attempt_data  %>% filter(!short_code %in% repeat_codes)
#remove short_code column
cleaned_previous_data<-subset(cleaned_previous_data, select = -c(short_code))
#fix block number or step number for new conditions
last_block<-max(previous_attempt_data$BlockNumber)
#add block number to the block numbers in the repeat data
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]<-repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
#add the number of times this condition has been run
repeat_data<- repeat_data %>% mutate(Attempt = as.numeric(attempt))
#rbind repeat to cleaned attempt df
previous_attempt_plus_repeat<-rbind(cleaned_previous_data,repeat_data)
previous_attempt_file<-stri_sub(previous_attempt_file,1,-5)
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_file
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
unlink(here("Studies",study,sub_folder_name,repeat_file))
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_data<-import(here("Studies",study,sub_folder_name,previous_attempt_file))
previous_attempt_file
previous_attempt_data<-import(here("Studies",study,sub_folder_name,previous_attempt_file))
unlink(here("Studies",study,sub_folder_name,previous_attempt_file))
repeat_codes<-unique(repeat_data$TrialNumber)
#turn all codes into the 3 first digits
repeat_codes<-as.numeric(substr(repeat_codes,1,3))
#make a new column of codes with only 3 digits or less
previous_attempt_data<-previous_attempt_data %>% mutate(short_code = TrialNumber)
previous_attempt_data$short_code<-as.numeric(substr(previous_attempt_data$short_code,1,3))
#remove rows with these codes from previous attempt data
cleaned_previous_data<-previous_attempt_data  %>% filter(!short_code %in% repeat_codes)
#remove short_code column
cleaned_previous_data<-subset(cleaned_previous_data, select = -c(short_code))
#fix block number or step number for new conditions
last_block<-max(previous_attempt_data$BlockNumber)
#add block number to the block numbers in the repeat data
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]<-repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
#add the number of times this condition has been run
repeat_data<- repeat_data %>% mutate(Attempt = as.numeric(attempt))
stri_sub(previous_attempt_file,1,-5)
previous_attempt_plus_repeat<-rbind(cleaned_previous_data,repeat_data)
View(previous_attempt_plus_repeat)
previous_attempt_file<-stri_sub(previous_attempt_file,1,-5)
previous_attempt_file
#save the new data frame as an 'Answers' file
filename<-gsub(" ","",paste(previous_attempt_file,"_",as.character(attempt),"_.csv"))
filename
export(previous_attempt_plus_repeat,here("Studies",study,sub_folder_name,filename),col.names=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
study=readline("Study folder name:")
sub_n<- readline("Subject number:")
sub_n
attempt<- readline(prompt = "Staircase attempt number:");
attempt
sub_folder_name<-paste0("sub_",sub_n)
sub_folder_name
repeat_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1];
repeat_data<-import(here("Studies",study,sub_folder_name,repeat_file))
unlink(here("Studies",study,sub_folder_name,repeat_file))
previous_attempt_file<-list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("Answers*.csv"))[1];
previous_attempt_data<-import(here("Studies",study,sub_folder_name,previous_attempt_file))
unlink(here("Studies",study,sub_folder_name,previous_attempt_file))
#make a unique vector of the condition codes used in the repeat TrialNumber column
repeat_codes<-unique(repeat_data$TrialNumber)
#turn all codes into the 3 first digits
repeat_codes<-as.numeric(substr(repeat_codes,1,3))
#make a new column of codes with only 3 digits or less
previous_attempt_data<-previous_attempt_data %>% mutate(short_code = TrialNumber)
previous_attempt_data$short_code<-as.numeric(substr(previous_attempt_data$short_code,1,3))
#remove rows with these codes from previous attempt data
cleaned_previous_data<-previous_attempt_data  %>% filter(!short_code %in% repeat_codes)
#remove short_code column
cleaned_previous_data<-subset(cleaned_previous_data, select = -c(short_code))
#fix block number or step number for new conditions
last_block<-max(previous_attempt_data$BlockNumber)
#add block number to the block numbers in the repeat data
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]<-repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
#add the number of times this condition has been run
repeat_data<- repeat_data %>% mutate(Attempt = as.numeric(attempt))
#rbind repeat to cleaned attempt df
previous_attempt_plus_repeat<-rbind(cleaned_previous_data,repeat_data)
previous_attempt_file<-stri_sub(previous_attempt_file,1,-5)
#save the new data frame as an 'Answers' file
filename<-gsub(" ","",paste(previous_attempt_file,"_",as.character(attempt),"_.csv"))
export(previous_attempt_plus_repeat,here("Studies",study,sub_folder_name,filename),col.names=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd_2.R", echo=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/R_functions/repeat_jnd.R", echo=TRUE)
source("C:/Users/User/OneDrive/Desktop/unreal_psychophysics/R_functions/repeat_jnd.R", echo=TRUE)
source(here("repeat_list.R"))
source(here("repeat_jnd.R"))
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_list.R", echo=TRUE)
here("Studies",study,sub_folder_name,filename)
here("Studies",study,sub_folder_name)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/run_unreal_psy.R", echo=TRUE)
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
repeat_data$BlockNumber
repeat_data$BlockNumber[repeat_data$BlockNumber!=0]+last_block
last_block
View(repeat_data)
list.files(here("Studies",study,sub_folder_name), pattern=glob2rx("*repeat*.csv"))[1]
source("C:/Users/User/Desktop/GitHub/psych_gady/unreal_psychophysics/repeat_jnd.R", echo=TRUE)
